SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end of trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%end trip%' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James' AND activity LIKE '%update%';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'finalization of a trip' AND resource LIKE '%James%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%end of trip%' AND activity COLLATE NOCASE LIKE '%james%';
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT e.employee_name, COUNT(CASE WHEN activity LIKE '%travel_declaration%' THEN 1 ELSE NULL END) AS travel_declaration_actions, COUNT(CASE WHEN activity LIKE '%travel_declaration%' AND cost > 0 THEN 1 ELSE NULL END) AS approved_travel_declaration_actions, COUNT(CASE WHEN activity LIKE '%travel_declaration%' AND cost = 0 THEN 1 ELSE NULL END) AS rejected_travel_declaration_actions FROM event_log el JOIN employees e ON el.idcase = e.idcase WHERE activity LIKE '%travel_declaration%' GROUP BY e.employee_name ORDER BY travel_declaration_actions DESC;
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
CREATE TABLE "employees" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") );
SELECT COUNT(*) FROM event_log JOIN employees ON event_log.idcase = employees.id WHERE employees.name = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource LIKE '%Peter%';
SELECT COUNT(*) AS total_actions, SUM(CASE WHEN activity LIKE '%travel declaration%' THEN cost ELSE 0 END) AS total_cost FROM event_log WHERE activity LIKE '%travel declaration%' AND resource LIKE '%Peter%' AND idcase LIKE '%travel declaration%' ORDER BY total_cost DESC;
SELECT * FROM event_log WHERE activity LIKE '%Terminated%' AND EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2018;
SELECT * FROM event_log WHERE idcase LIKE '%MARCH 2018%' AND timestamp LIKE '%2018-03-%';
SELECT idcase FROM event_log WHERE activity = 'terminated' AND timestamp BETWEEN '2018-03-01' AND '2018-03-31';
SELECT idcase FROM event_log WHERE timestamp LIKE '%-03-31%' AND activity LIKE '%END%';
SELECT DISTINCT idcase FROM event_log WHERE timestamp LIKE '2018-03-%' ORDER BY idcase;
SELECT idcase FROM event_log WHERE timestamp LIKE '2018-03-%';
SELECT idcase FROM event_log WHERE timestamp LIKE '%-03-01%' OR timestamp LIKE '%-03-02%' OR timestamp LIKE '%-03-03%' OR timestamp LIKE '%-03-04%' OR timestamp LIKE '%-03-05%' OR timestamp LIKE '%-03-06%' OR timestamp LIKE '%-03-07%' OR timestamp LIKE '%-03-08%' OR timestamp LIKE '%-03-09%' OR timestamp LIKE '%-03-10%' OR timestamp LIKE '%-03-11%' OR timestamp LIKE '%-03-12%' OR timestamp LIKE '%-03-13%' OR timestamp LIKE '%-03-14%' OR timestamp LIKE '%-03-15%' OR timestamp LIKE '%-03-16%' OR timestamp LIKE '%-03-17%' OR timestamp LIKE '%-03-18%' OR timestamp LIKE '%-03-19%' OR timestamp LIKE '%-03-20%' OR timestamp LIKE '%-03-21%' OR timestamp LIKE '%-03-22%' OR timestamp LIKE '%-03-23%' OR timestamp LIKE '%-03-24%' OR timestamp LIKE '%-03-25%' OR timestamp LIKE '%-03-26%' OR timestamp LIKE '%-03-27%' OR timestamp LIKE '%-03-28%' OR timestamp LIKE '%-03-29%' OR timestamp LIKE '%-03-30%' OR timestamp LIKE '%-03-31%';
SELECT * FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-03';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource!= 'Douglas';
SELECT activity FROM event_log WHERE cost < 0 AND activity NOT LIKE '%Douglas%';
SELECT * FROM event_log WHERE activity LIKE '%declaration%' AND resource LIKE '%pre-approver%' AND idcase!= 'Douglas' AND cost > 0;
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT "resource") AS "Number of distinct resources" FROM "event_log";
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_people FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT "idcase") AS num_people FROM "event_log";
SELECT COUNT(DISTINCT "resource") AS "Number of different resources" FROM "event_log";
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT "resource") AS "Number of different resources" FROM "event_log";
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT "idcase") AS "Number of different people" FROM "event_log";
SELECT COUNT(DISTINCT e.id) AS num_employees FROM employees e JOIN employee_activities ea ON e.id = ea.employee_id JOIN event_log el ON ea.activity_id = el.id WHERE el.activity LIKE '%declaration%';
SELECT A SQL question! Unfortunately, the provided database schema does not contain any information about employees or declarations. The event_log table appears to be a log of various activities, with columns for the activity, timestamp, resource, cost, and a unique identifier. To answer the question "How many employees worked on processing the declarations?", we would need additional tables and relationships to link employees to the activities they performed. Specifically, we would need a table for employees and a table that links employees to activities (e.g., a many-to-many relationship). Without this additional information, we cannot provide a meaningful answer to this question.
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT e.name, COUNT(el.id) AS total_actions FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name
SELECT idcase FROM event_log WHERE cost > 2225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT * FROM "event_log" WHERE "cost" > 2225;
SELECT DISTINCT "idcase" FROM "event_log" WHERE "cost" > 2225;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT e.name, COUNT(*) as total_work FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity LIKE '%declaration%' AND el.resource LIKE '%employee%' GROUP BY e.name ORDER BY total_work DESC;
SELECT resource, COUNT(*) as event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) as event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%declaration%' -- filter activities related to declarations GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT e.name, COUNT(el.id) AS num_declarations FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity LIKE '%declaration%' GROUP BY e.name ORDER BY num_declarations DESC;
SELECT activity FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT activity FROM event_log WHERE cost IS NOT NULL;
SELECT DISTINCT activity FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE activity LIKE '%declarations%' AND cost > 0;
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE activity IN ('start trip','request payment');
SELECT * FROM event_log WHERE activity IN ('start trip','request payment');
SELECT * FROM event_log WHERE activity IN ('start trip','request payment');
SELECT * FROM event_log WHERE activity IN ('start trip','request payment');
SELECT * FROM event_log WHERE activity IN ('start_trip','make_payment_request');
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE idcase = 'declarations' -- assuming idcase is the column that indicates the type of declaration GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity LIKE '%declaration%' OR activity LIKE '%declarations%' GROUP BY activity ORDER BY frequency DESC;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE YEAR(timestamp) = 2017;
SELECT * FROM event_log WHERE YEAR(timestamp) = 2017;
SELECT activity FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM "event_log" WHERE EXTRACT(YEAR FROM "timestamp") = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%processing of declarations%';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE activity LIKE '%declaration%' AND EXTRACT(YEAR FROM timestamp) = 2017 ORDER BY timestamp;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%processing declarations%';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%processing of declarations%';
SELECT activity FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%processing declarations%';
SELECT DISTINCT resource, COUNT(*) as event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 20;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource HAVING COUNT(*) <= 20;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT DISTINCT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20 ORDER BY num_events DESC;
SELECT DISTINCT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT d.id, d.name, COUNT(el.id) AS event_count FROM declarations d JOIN event_log el ON d.id = el.idcase GROUP BY d.id, d.name HAVING COUNT(el.id) <= 20;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT e.name, COUNT(*) as num_declarations FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name ORDER BY num_declarations DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT e.name, COUNT(*) as total_events FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name ORDER BY total_events DESC LIMIT 5;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity ='start trip' AND YEAR(timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity ='start trip' AND YEAR(timestamp) = 2016 GROUP BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log WHERE activity ='start trip' AND YEAR(timestamp) = 2016 GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity ='start trip' AND timestamp >= '2016-01-01 00:00:00' AND timestamp < '2017-01-01 00:00:00' GROUP BY resource
SELECT resource, COUNT(*) AS num_performances FROM event_log WHERE activity ='start trip' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity ='start trip' AND timestamp >= '2016-01-01 00:00:00' AND timestamp < '2017-01-01 00:00:00' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as total_occurrences FROM event_log WHERE activity ='start trip' AND timestamp >= '2016-01-01 00:00:00' AND timestamp < '2017-01-01 00:00:00' GROUP BY resource
SELECT e.name, COUNT(*) as num_actions FROM event_log el JOIN employees e ON el.idcase = e.employee_id WHERE el.activity ='start_trip' AND el.timestamp >= '2016-01-01' AND el.timestamp < '2017-01-01' GROUP BY e.name
SELECT resource, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%start of trip%' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT e.name, COUNT(*) as num_rejections FROM event_log el JOIN employees e ON el.idcase = e.id JOIN declarations d ON el.resource = d.id WHERE el.activity ='reject declaration' AND e.role ='supervisor' GROUP BY e.name
SELECT DISTINCT idcase, COUNT(*) as activity_count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20 ORDER BY count DESC;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS activity_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT activity, COUNT(*) AS num_interventions FROM event_log GROUP BY activity HAVING COUNT(*) > 20
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase ORDER BY count DESC LIMIT 10;
SELECT idcase, COUNT(*) as event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 1;
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase ORDER BY num_actions DESC LIMIT 1;
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='request payment'
SELECT * FROM event_log WHERE resource = 'Sara' AND activity!='request payment'
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND activity!='request payment';
SELECT * FROM event_log WHERE resource = 'Sara' AND activity!='request payment';
SELECT DISTINCT idcase FROM event_log WHERE activity!='request payment' AND resource = 'Sara'
SELECT el.activity, el.timestamp, el.resource, el.cost, el.idcase FROM event_log el JOIN payment_request pr ON el.id = pr.event_log_id WHERE el.activity LIKE '%Sara%' AND pr.status = 'NOT_OPENED'
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaration 143598' ORDER BY timestamp;
SELECT * FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaration 143598';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10 00:00:00' AND '2017-02-01 23:59:59' AND idcase = '143598' ORDER BY timestamp;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT e.name, COUNT(*) AS num_declarations FROM event_log el JOIN employees e ON el.resource = e.name WHERE el.timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY e.name
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase ORDER BY total_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase ORDER BY total_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase ORDER BY total_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) AS num_actions, activity FROM event_log GROUP BY idcase, activity ORDER BY num_actions DESC LIMIT 10;
SELECT "resource", COUNT(*) AS "action_count" FROM "event_log" GROUP BY "resource" ORDER BY "action_count" DESC LIMIT 10;
SELECT idcase, COUNT(*) as event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) as event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase ORDER BY count DESC LIMIT 10;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%declaration%' GROUP BY idcase;
SELECT activity, SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%declaration%' -- adjust this to match your expected declaration activity GROUP BY activity;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY num_events DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY num_events DESC;
SELECT "resource" AS employee, COUNT(*) AS num_actions FROM "event_log" GROUP BY "resource" HAVING COUNT(*) >= 100 ORDER BY num_actions DESC;
SELECT idcase AS "Case Number", timestamp AS "Start Date", activity AS "Event" FROM event_log ORDER BY idcase, timestamp;
SELECT c.idcase, el.activity, el.timestamp, el.resource, el.cost FROM event_log el JOIN cases c ON el.idcase = c.idcase ORDER BY c.idcase, c.start_date;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT "idcase" AS "Case Identifier", "activity" AS "Event", "timestamp" AS "Start Date" FROM "event_log" ORDER BY "idcase", "timestamp";
SELECT idcase AS "Case ID", activity, timestamp AS "Start Date" FROM event_log ORDER BY idcase, timestamp;
SELECT idcase AS "Declaration Code", timestamp AS "Start Date", activity, resource, cost FROM event_log WHERE activity LIKE '%declaration%' ORDER BY idcase, timestamp;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS total_times FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS total_occurrences FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT u.username, COUNT(*) AS approval_count FROM event_log el JOIN users u ON el.idcase = u.id WHERE el.activity = 'approved declaration' AND u.role = 'administrator' GROUP BY u.username;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS num_approvals FROM event_log WHERE activity = 'approve declaration' AND activity LIKE '%administrator%' -- assuming administrator is part of the activity string GROUP BY resource;
SELECT activity, COUNT(*) as count FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity;
SELECT activity, resource, COUNT(*) as count FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas' GROUP BY activity, resource ORDER BY activity, count;
SELECT activity, COUNT(*) as count FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%Thomas%' GROUP BY activity ORDER BY count DESC;
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%processing declarations%' AND idcase LIKE '%Thomas%' AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT activity, MAX(timestamp) AS most_recent_date FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_timestamp FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_performance_date FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_performance FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS latest_performance FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_date FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_timestamp FROM event_log GROUP BY activity;
SELECT COUNT(CASE WHEN activity = 'declaration approved by supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS "2017", COUNT(CASE WHEN activity = 'permit rejected by employee' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS "2018" FROM event_log;
SELECT COUNT(CASE WHEN activity = 'declaration approved by supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS "declaration approved by supervisor in 2017", COUNT(CASE WHEN activity = 'permit rejected by employee' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS "permit rejected by employee in 2018" FROM event_log;
SELECT COUNT(CASE WHEN activity = 'declaration approved by supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS approved_in_2017, COUNT(CASE WHEN activity = 'permit rejected by employee' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS rejected_in_2018 FROM event_log;
SELECT COUNT(CASE WHEN activity = 'declaration approved by supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS "declaration approved by supervisor in 2017", COUNT(CASE WHEN activity = 'permit rejected by employee' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS "permit rejected by employee in 2018" FROM event_log;
SELECT COUNT(*) AS count FROM event_log WHERE activity = 'declaration approved by supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT COUNT(*) FROM event_log WHERE activity IN ('declaration approval', 'declaration rejection') AND (EXTRACT(YEAR FROM timestamp) = 2017 AND activity = 'declaration approval') OR (EXTRACT(YEAR FROM timestamp) = 2018 AND activity = 'declaration rejection');
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp;
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp;
SELECT activity, timestamp, id FROM event_log WHERE activity LIKE '%declaration%' -- filter for activities related to declarations ORDER BY timestamp;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaration request%' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT * FROM event_log WHERE activity LIKE '%Diana%' AND activity LIKE '%declarations%' AND cost IS NOT NULL;
SELECT activity, COUNT(*) AS num_events, SUM(CASE WHEN cost IS NOT NULL THEN 1 ELSE 0 END) AS num_events_with_cost FROM event_log WHERE resource = 'Diana' GROUP BY activity;
SELECT activity, COUNT(*) as num_events FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity;
SELECT DISTINCT activity FROM event_log WHERE resource LIKE '%Diana%' AND activity LIKE '%declarations%' AND cost IS NOT NULL;
SELECT COUNT(DISTINCT resource) FROM event_log WHERE id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) FROM event_log WHERE id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(id) > 3 )
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(id) > 3 )
SELECT COUNT(DISTINCT "resource") AS "Number of resources" FROM "event_log" WHERE "idcase" IS NOT NULL GROUP BY "idcase" HAVING COUNT("id") > 3;
SELECT COUNT(DISTINCT "idcase") AS num_employees FROM "event_log" WHERE "activity" LIKE '%processing declaration%' AND "resource" LIKE '%employee%' AND COUNT(*) OVER (PARTITION BY "idcase") > 3;
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT "resource" AS "Employee" FROM "event_log" WHERE "activity" LIKE '%reject%' AND "idcase" IS NOT NULL;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'declaration final approved by director' AND EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 5 AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT idcase, COUNT(*) as num_cases FROM event_log WHERE activity = 'declaration final approved by director' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY idcase
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'declaration final approved by director' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration' AND idcase LIKE '%declaration%' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31' AND activity LIKE '%final approved by a director%';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND timestamp >= '2018-01-01' AND timestamp < '2018-02-01' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND timestamp >= '2018-01-01' AND timestamp < '2018-02-01' );
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND timestamp NOT LIKE '2018-01-%' ORDER BY idcase;
SELECT idcase FROM event_log WHERE activity LIKE '%Charles%' AND resource = 'Charles' AND timestamp >= '2018-01-01' AND timestamp < '2018-02-01' EXCEPT SELECT idcase FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-02-01';
SELECT * FROM event_log WHERE timestamp >= '2018-02-01' AND timestamp < '2019-01-01' AND resource = 'Charles';
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%intervention%' AND idcase = 'Charles' AND timestamp > '2018-01-31 23:59:59';
SELECT DISTINCT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3 ORDER BY num_activities DESC;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT DISTINCT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3 ORDER BY num_activities DESC;
SELECT column_name, COUNT(DISTINCT value) AS num_interventions FROM ( SELECT "activity", "resource", "idcase", "cost" FROM "event_log" GROUP BY "activity", "resource", "idcase", "cost" ) AS grouped_columns GROUP BY column_name HAVING COUNT(DISTINCT value) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT "activity", "resource", "idcase"
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_time FROM event_log GROUP BY idcase;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log)
SELECT idcase, resource FROM (SELECT idcase, resource, COUNT(*) AS count_activities, GROUP_CONCAT(DISTINCT activity) AS activities FROM event_log GROUP BY idcase, resource) AS subquery WHERE count_activities = (SELECT COUNT(*) FROM event_log) AND activities = (SELECT GROUP_CONCAT(DISTINCT activity) FROM event_log);
SELECT idcase, resource, activity FROM event_log GROUP BY idcase, resource, activity HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource, COUNT(*) as count FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource, COUNT(*) as count FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource, COUNT(*) as num_activities FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource FROM ( SELECT idcase, resource, COUNT(*) as count FROM event_log GROUP BY idcase, resource ) as subquery WHERE count = ( SELECT MAX(count) FROM ( SELECT idcase, resource, COUNT(*) as count FROM event_log GROUP BY idcase, resource ) as subquery2 )
SELECT A SQL question! Unfortunately, the provided database schema does not contain any information about employees or their roles in creating the declarations. The schema only defines a table called "event_log" with various columns to store events, activities, and related data. Therefore, it is not possible to answer the question "Which declarations were entirely handled by a single employee and what is the name of that employee?" based on the provided schema. If you could provide more context or additional information about the employees and their roles in creating the declarations, I'd be happy to help you with the query.
SELECT DISTINCT idcase FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-01-01 00:00:00';
SELECT idcase FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-01-01 00:00:00';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT pi.id FROM event_log el JOIN process_instance pi ON el.idcase = pi.idcase WHERE el.activity = 'end trip' AND el.timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT idcase FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-01-01 00:00:00';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-01-01 00:00:00';
SELECT idcase FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-01-01 00:00:00';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity LIKE '%end of trip%' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT * FROM event_log WHERE activity LIKE '%rejected%';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE activity LIKE '%rejection%' AND cost > 0;
SELECT activity, COUNT(*) AS count, SUM(cost) AS total_cost, MIN(timestamp) AS earliest_timestamp, MAX(timestamp) AS latest_timestamp FROM event_log WHERE activity LIKE '%rejection%' OR activity LIKE '%intervention%' GROUP BY activity ORDER BY count DESC;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(CASE WHEN cost > 0 THEN 1 ELSE NULL END) AS min_interventions, MAX(CASE WHEN cost > 0 THEN 1 ELSE NULL END) AS max_interventions FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT el1.id, el1.timestamp AS start_time, el2.timestamp AS end_time, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS time_taken FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity IN ('start trip') AND el2.activity IN ('end trip', 'declaration rejected by employee', 'payment handled') ORDER BY el1.id;
SELECT el1.idcase, el1.timestamp AS start_time, el2.timestamp AS end_time, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS time_taken FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity IN ('start trip') AND el2.activity IN ('end trip', 'declaration rejected by employee', 'payment handled') ORDER BY el1.idcase;
SELECT el1.idcase, el1.timestamp - (SELECT MIN(timestamp) FROM event_log WHERE idcase = el1.idcase) AS time_elapsed FROM event_log el1 WHERE el1.activity IN ('end trip', 'declaration rejected by employee', 'payment handled') ORDER BY el1.idcase;
SELECT MIN(timestamp) AS first_declaration, MAX(CASE WHEN activity = 'trip_finalized' THEN timestamp WHEN activity = 'declaration_rejected' THEN timestamp WHEN activity = 'payment_made' THEN timestamp END) AS final_event, TIMESTAMPDIFF(SECOND, first_declaration, final_event) AS time_diff FROM event_log WHERE activity IN ('declaration_submitted', 'trip_finalized', 'declaration_rejected', 'payment_made') GROUP BY idcase
SELECT MIN(timestamp) AS start_time, MAX(CASE WHEN activity IN ('trip_end', 'declination', 'payment') THEN timestamp ELSE NULL END) AS end_time FROM event_log WHERE idcase ='some_idcase' -- replace with the actual idcase value GROUP BY idcase
WITH event_log AS ( SELECT id, activity, timestamp, resource, cost, idcase, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS row_num FROM event_log ) SELECT el1.idcase, el1.activity AS final_activity, el1.timestamp - el2.timestamp AS time_diff FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.row_num = 1 AND el2.row_num = (SELECT MAX(row_num) FROM event_log WHERE idcase = el1.idcase AND activity IN ('end trip', 'declaration rejected by employee', 'payment handled')) WHERE el1.activity IN ('end trip', 'declaration rejected by employee', 'payment handled');
WITH -- Find the first event of each case first_event AS ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ), -- Find the end event of each case (end trip, declaration rejected, or payment handled) end_event AS ( SELECT idcase, timestamp AS end_time, activity FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee', 'payment handled') ), -- Join the two tables to find the time interval for each case time_intervals AS ( SELECT fe.idcase, fe.start_time, ee.end_time, DATEDIFF(ee.end_time, fe.start_time) AS time_interval FROM first_event fe JOIN end_event ee ON fe.idcase = ee.idcase ) -- Finally, select the desired columns SELECT ti.idcase, ti.start_time, ti.end_time, ti.time_interval FROM time_intervals ti ORDER BY ti.idcase;
WITH -- Find the first event of each case first_event AS ( SELECT idcase, MIN(timestamp) AS first_timestamp FROM event_log GROUP BY idcase ), -- Find the end event of each case end_event AS ( SELECT idcase, CASE WHEN activity = 'end trip' THEN timestamp WHEN activity = 'declaration rejected by employee' THEN timestamp WHEN activity = 'payment handled' THEN timestamp ELSE NULL END AS end_timestamp FROM event_log ) SELECT fe.idcase, fe.first_timestamp, ee.end_timestamp, TIMESTAMPDIFF(SECOND, fe.first_timestamp, ee.end_timestamp) AS time_taken FROM first_event fe JOIN end_event ee ON fe.idcase = ee.idcase WHERE ee.end_timestamp IS NOT NULL;
WITH event_log_with_row_num AS ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS row_num FROM event_log ) SELECT el.idcase, el.activity, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log_with_row_num WHERE idcase = el.idcase), el.timestamp) AS elapsed_time FROM event_log_with_row_num el WHERE el.activity IN ('end trip', 'declaration rejected by employee', 'payment handled') ORDER BY el.idcase, el.activity;
SELECT MIN(timestamp) AS start_time, MAX(timestamp) AS end_time FROM event_log WHERE activity IN ('start processing declaration', 'end of trip recorded','rejected by employee', 'payment made') AND idcase IS NOT NULL GROUP BY idcase
SELECT * FROM event_log WHERE activity ='request payment';
SELECT * FROM event_log WHERE activity ='request payment';
SELECT * FROM event_log WHERE activity = 'payment_request' AND idcase IS NOT NULL;
SELECT DISTINCT activity, resource FROM event_log WHERE activity LIKE '%payment%' AND resource LIKE '%declaration%';
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(end_timestamp, timestamp)) AS average_duration FROM event_log JOIN end_times ON event_log.id = end_times.id GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS mean_duration FROM event_log GROUP BY activity ORDER BY mean_duration;
SELECT activity, AVG(cost) AS mean_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT el1.activity, AVG(DATEDIFF(el2.timestamp, el1.timestamp)) AS average_duration FROM event_log el1 LEFT JOIN event_log el2 ON el1.id = el2.id - 1 GROUP BY el1.activity
SELECT el1.activity, AVG(DATEDIFF(el2.timestamp, el1.timestamp)) AS average_duration FROM event_log el1 JOIN event_log el2 ON el1.activity = el2.activity AND el1.id < el2.id GROUP BY el1.activity
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity ORDER BY mean_duration;
SELECT activity, AVG(cost) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = e.activity), (SELECT MAX(timestamp) FROM event_log WHERE activity = e.activity))) AS mean_duration FROM event_log e GROUP BY activity
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS mean_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS average_duration FROM event_log GROUP BY activity ORDER BY average_duration;
SELECT activity, AVG(DATEDIFF(MAX(timestamp), MIN(timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(MAX(timestamp), MIN(timestamp))) AS average_duration FROM event_log GROUP BY activity;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT idcase FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT DISTINCT idcase FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC LIMIT 10;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT activity, cost FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start trip';
SELECT * FROM event_log WHERE activity ='start_trip';
SELECT * FROM event_log WHERE activity LIKE '%start%' AND activity LIKE '%trip%';
SELECT activity, COUNT(*) as total_records FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_interventions FROM event_log GROUP BY activity ORDER BY num_interventions DESC;
SELECT activity, COUNT(*) as count FROM event_log WHERE activity LIKE '%declaration%' -- assuming the actions are related to declarations GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as num_interventions FROM event_log GROUP BY activity ORDER BY num_interventions DESC;
SELECT activity, COUNT(*) as num_interventions FROM event_log WHERE activity LIKE '%declaration%' GROUP BY activity;
SELECT activity, COUNT(*) AS num_interventions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_interventions FROM event_log WHERE activity LIKE '%declaration%' GROUP BY activity;
SELECT activity, COUNT(*) AS num_interventions FROM event_log WHERE resource = 'declarations' GROUP BY activity;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost DESC;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, SUM(cost) AS total_cost, COUNT(*) AS num_interventions FROM event_log GROUP BY activity ORDER BY total_cost DESC;
SELECT "resource", SUM("cost") AS "total_cost" FROM "event_log" WHERE "activity" LIKE '%declaration processing%' GROUP BY "resource" ORDER BY "total_cost" DESC;
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity LIKE '%permit generated%';
SELECT activity, resource, timestamp, cost, idcase FROM event_log WHERE activity LIKE '%permit%' AND activity LIKE '%intervention%' AND activity LIKE '%declaration%';
SELECT MAX("cost") AS highest_cost FROM "event_log";
SELECT MAX("cost") AS highest_cost FROM "event_log";
SELECT MAX(cost) AS highest_cost FROM event_log;
SELECT MAX("cost") AS highest_cost FROM "event_log";
SELECT MAX("cost") AS highest_cost FROM "event_log";
SELECT MAX(cost) AS most_expensive_cost FROM event_log WHERE activity LIKE '%intervention%';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' OR resource = 'Thomas' GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT * FROM event_log WHERE "resource" = 'Sara' AND "resource" = 'Thomas';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' OR resource = 'Thomas';
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas');
SELECT activity FROM event_log WHERE activity LIKE '%Sara%' AND activity LIKE '%Thomas%';
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT resource, COUNT(*) AS rejection_count FROM event_log WHERE activity ='reject declaration' AND idcase = 'administrator' GROUP BY resource ORDER BY rejection_count DESC;
SELECT "resource", "idcase", COUNT(*) AS "count" FROM "event_log" WHERE "activity" = 'declaration rejected by administration' GROUP BY "resource", "idcase";
SELECT el.idcase, el.resource, COUNT(*) AS count FROM event_log el WHERE el.activity = 'declaration rejected by administration' GROUP BY el.idcase, el.resource;
SELECT el.idcase, el.resource, COUNT(*) AS count FROM event_log el WHERE el.activity = 'declaration rejected by administration' GROUP BY el.idcase, el.resource;
SELECT "resource", "idcase", COUNT(*) AS "number_of_instances" FROM "event_log" WHERE "activity" = 'declaration rejected by administration' GROUP BY "resource", "idcase";
SELECT "idcase", "resource", COUNT(*) AS "count" FROM "event_log" WHERE "activity" = 'declaration rejected by administration' GROUP BY "idcase", "resource"
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT "resource", "idcase", COUNT(*) AS "number_of_instances" FROM "event_log" WHERE "activity" = 'declaration rejected by administration' GROUP BY "resource", "idcase";
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource, idcase;
SELECT el.idcase, el.resource, COUNT(*) AS num_events FROM event_log el WHERE el.activity = 'declaration rejected by administration' GROUP BY el.idcase, el.resource;
SELECT idcase, COUNT(*) AS num_rejections FROM event_log WHERE activity ='reject' AND activity = 'admin' AND resource LIKE '%declaration%' -- assuming resource contains the declaration name GROUP BY idcase;
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT IN ('start trip', 'end trip');
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT LIKE '%start trip%' AND "activity" NOT LIKE '%end trip%';
SELECT AVG("cost") FROM "event_log" WHERE "activity" NOT IN ('start trip', 'end trip');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('start_trip', 'end_trip');
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT resource, SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%intervention%' AND idcase = 'declarations' GROUP BY resource ORDER BY total_cost DESC LIMIT 5;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT A SQL question! According to the database schema, the following declarations have undergone more than one intervention: * activity and resource both have a COLLATE NOCASE declaration, which means they have been modified to ignore case sensitivity. * idcase also has a COLLATE NOCASE declaration, which means it has been modified to ignore case sensitivity as well. So, the answer is: activity, resource, and idcase
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 1;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(activity) > 1;
SELECT In the given database schema, the following declarations require an action to be performed more than once: 1. COLLATE NOCASE:
SELECT activity, resource, cost, timestamp FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59' ORDER BY timestamp;
SELECT activity FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59' AND activity LIKE '%intervention%'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59' ORDER BY timestamp;
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE resource LIKE 'M%';
SELECT e.name, el.activity FROM employees e JOIN event_log el ON e.id =? // assuming the id in event_log corresponds to the id in employees WHERE e.name LIKE 'M%' AND el.activity LIKE '%declarations%'
CREATE TABLE "employees" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") )
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY idcase, count DESC;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY idcase, count DESC;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT DISTINCT el.activity FROM event_log el JOIN ( SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ) t ON el.idcase = t.idcase AND el.activity = t.activity ORDER BY el.activity;
SELECT DISTINCT el1.activity FROM event_log el1 JOIN ( SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) el2 ON el1.idcase = el2.idcase ORDER BY el1.activity;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) as event_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT SUM(cost) AS total_cost FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = '56300';
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'insert%' AND activity NOT LIKE 'update%' AND activity NOT LIKE 'delete%' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY count DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'insert%' AND activity NOT LIKE 'update%' AND activity NOT LIKE 'delete%' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'insert%' AND activity NOT LIKE 'update%' AND activity NOT LIKE 'delete%' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY count DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'idcase%' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'insert%' AND activity NOT LIKE 'update%' AND activity NOT LIKE 'delete%' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity NOT LIKE 'insert%' AND activity NOT LIKE 'update%' AND activity NOT LIKE 'delete%' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity LIKE '%declaration%' AND timestamp < '2017-10-01' GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(*) - COUNT(DISTINCT activity) AS duplicate_actions FROM event_log WHERE timestamp < '2017-01-10 00:00:00'
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource;
SELECT idcase, COUNT(*) AS num_declarations FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS allocation_count FROM event_log WHERE activity = 'allocate' GROUP BY resource;
SELECT resource, COUNT(*) AS "count" FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log GROUP BY resource ORDER BY num_occurrences DESC;
SELECT e.id AS employee_id, COUNT(*) AS num_interventions FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.id;
SELECT DISTINCT "resource", "idcase" FROM "event_log" WHERE "resource" IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT "resource", "idcase" FROM "event_log" WHERE "resource" IN ('Thomas', 'Diana', 'Sara');
SELECT A SQL query! Since the database schema is provided, we can analyze it to answer the question. The query is asking for the declarations made by Thomas, Diana, or Sara. However, the database schema does not contain any information about Thomas, Diana, or Sara. The schema only defines the structure of the "event_log" table, which includes columns for "id", "activity", "timestamp", "resource", "cost", and "idcase". Therefore, the answer to the question is: There are no declarations made by Thomas, Diana, or Sara, as this information is not present in the provided database schema.
SELECT resource, COUNT(*) AS count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS process_instances FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT e.name, COUNT(*) as declarations_processed FROM event_log el JOIN employees e ON el.idcase = e.employee_id WHERE el.activity = 'declaration processed' AND el.timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY e.name
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource ORDER BY num_cases DESC;
SELECT e.name, COUNT(*) as num_declarations FROM event_log el JOIN employees e ON el.idcase = e.employee_id WHERE el.activity LIKE '%intervention%' AND el.timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY e.name
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') ORDER BY activity, resource;
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa');
SELECT DISTINCT el.activity, el.resource FROM event_log el WHERE el.resource NOT IN ('Joshua', 'Teresa') ORDER BY el.activity, el.resource;
SELECT DISTINCT e.activity, e.resource, el.idcase FROM event_log el JOIN event_log e ON el.idcase = e.idcase WHERE el.activity LIKE '%intervention%' AND (el.idcase NOT LIKE '%Joshua%' AND el.idcase NOT LIKE '%Teresa%');
SELECT el.activity, e.name AS responsible_employee FROM event_log el JOIN employees e ON el.idcase = e.idcase WHERE el.activity LIKE '%intervention%' AND el.activity NOT LIKE '%Joshua%' AND el.activity NOT LIKE '%Teresa%' ORDER BY el.timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('start trip', 'end trip') AND activity NOT IN ('request payment', 'payment handled');
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('start trip', 'end trip') AND id NOT IN ( SELECT id FROM event_log WHERE activity IN ('request payment', 'payment handled') )
SELECT idcase FROM event_log WHERE activity IN ('start trip', 'end trip') AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') );
SELECT * FROM event_log WHERE activity IN ('start trip', 'trip end') AND NOT EXISTS ( SELECT 1 FROM event_log WHERE activity IN ('request payment', 'payment handled') AND idcase = event_log.idcase )
SELECT idcase FROM event_log WHERE activity IN ('start trip', 'end trip') AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') )
SELECT * FROM event_log WHERE activity IN ('started', 'completed') AND cost > 0;
SELECT el1.id, el1.activity, el1.timestamp, el1.resource, el1.cost, el1.idcase FROM event_log el1 WHERE (el1.activity = 'trip_start' OR el1.activity = 'trip_end') AND NOT EXISTS ( SELECT 1 FROM event_log el2 WHERE el2.idcase = el1.idcase AND el2.activity = 'payment_request' AND el2.activity = 'payment_execution' ) ORDER BY el1.timestamp;
SELECT idcase FROM event_log WHERE activity NOT IN ('payment_request', 'payment_execution') AND (activity = 'trip_start' OR activity = 'trip_end');
SELECT * FROM event_log WHERE activity IN ('trip_start', 'trip_end') AND (activity = 'trip_start' AND NOT EXISTS (SELECT 1 FROM event_log WHERE activity = 'payment_request' AND timestamp <= (SELECT timestamp FROM event_log WHERE activity = 'trip_start')) OR activity = 'trip_end' AND NOT EXISTS (SELECT 1 FROM event_log WHERE activity = 'payment_execution' AND timestamp <= (SELECT timestamp FROM event_log WHERE activity = 'trip_end')));
SELECT * FROM event_log WHERE activity IN ('trip_start', 'trip_end') AND activity NOT IN ('payment_request', 'payment_made');
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource = '';
SELECT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL;
SELECT DISTINCT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL;
SELECT el.* FROM event_log el LEFT JOIN employee_allocation ea ON el.id = ea.event_id WHERE ea.allocation IS NULL OR ea.allocation = ''
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01 00:00:00' ORDER BY idcase;
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01 00:00:00';
SELECT DISTINCT e1.activity FROM event_log e1 WHERE NOT EXISTS ( SELECT 1 FROM event_log e2 WHERE e2.activity = e1.activity AND e2.timestamp < e1.timestamp ) AND e1.timestamp < '2017-03-01 00:00:00' ORDER BY e1.activity;
SELECT * FROM event_log WHERE timestamp < '2017-03-01 00:00:00';
SELECT DISTINCT idcase FROM event_log WHERE strftime('%Y-%m', timestamp) < '2017-03';
SELECT DISTINCT idcase FROM event_log WHERE activity = ( SELECT MIN(activity) FROM event_log GROUP BY idcase ) AND timestamp < '2017-03-01 00:00:00';
SELECT * FROM event_log WHERE DATE(timestamp) < '2017-03-01';
SELECT DISTINCT "resource" FROM "event_log" WHERE "timestamp" < '2017-03-01' ORDER BY "timestamp" ASC LIMIT 1;
SELECT DISTINCT "idcase" FROM "event_log" WHERE "activity" = 'intervention' AND "timestamp" < '2017-03-01 00:00:00';
SELECT * FROM event_log WHERE timestamp < '2017-03-01' AND activity LIKE '%declaration%';
SELECT DISTINCT idcase FROM event_log WHERE activity ='start trip' AND EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT idcase, activity, timestamp FROM event_log WHERE activity ='start trip' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' ORDER BY timestamp, idcase;
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp >= '2017-03-01' AND timestamp < '2017-04-01' GROUP BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE activity ='start trip' AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59' ORDER BY id LIMIT 1;
SELECT DISTINCT idcase FROM event_log WHERE activity ='start trip' AND timestamp = (SELECT MIN(timestamp) FROM event_log WHERE activity ='start trip') AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59';
SELECT DISTINCT idcase FROM event_log WHERE activity ='start trip' AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59';
SELECT * FROM event_log WHERE timestamp >= '2017-03-01' AND timestamp < '2017-04-01';
SELECT resource, idcase, COUNT(*) as count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) as count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, idcase, COUNT(*) as count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT DISTINCT resource FROM event_log WHERE idcase IS NOT NULL GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT DISTINCT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT DISTINCT resource FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 5 ) ORDER BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) as count FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT d.collaborator, d.declaration_id, COUNT(el.id) AS num_interventions FROM event_log el JOIN declarations d ON el.idcase = d.declaration_id GROUP BY d.collaborator, d.declaration_id HAVING COUNT(el.id) > 5
SELECT DISTINCT resource, COUNT(*) as count FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 10;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity LIKE '%declaration%' OR activity LIKE '%declared%' GROUP BY activity ORDER BY frequency DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT e.name, SUM(el.cost) AS total_cost FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity = 'approve declaration' AND el.resource ='supervisor' GROUP BY e.name ORDER BY total_cost DESC LIMIT 10;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as frequency FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) as frequency FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY count DESC;
SELECT e.name, SUM(el.cost) AS total_cost FROM event_log el JOIN employees e ON el.id = e.id JOIN declarations d ON el.id = d.id WHERE el.activity = 'declaration' AND e.position ='supervisor' AND el.idcase = d.id GROUP BY e.name ORDER BY total_cost DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration approved by budget owner' AND (resource = 'Eugene' OR resource = 'Marie');
SELECT COUNT(*) FROM event_log WHERE resource IN ('Eugene', 'Marie') AND activity = 'declaration approved by budget owner';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration approved by budget owner' AND (resource = 'Eugene' OR resource = 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration approved by budget owner' AND (resource = 'Eugene' OR resource = 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'declaration approved by budget owner' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration approved by budget owner' AND (resource = 'Eugine' OR resource = 'Marie');
SELECT idcase, COUNT(*) AS num_declarations FROM event_log WHERE activity LIKE '%approved%' AND idcase IN ('Eugene', 'Marie') GROUP BY idcase
SELECT COUNT(*) FROM event_log WHERE activity = 'approved' AND (idcase = 'Eugene' OR idcase = 'Marie');
SELECT e1.activity FROM event_log e1 WHERE e1.idcase = 'declaration 49464' EXCEPT SELECT e2.activity FROM event_log e2 WHERE e2.idcase = 'declaration 76667';
SELECT activity FROM event_log WHERE idcase = 'declaration 49464' EXCEPT SELECT activity FROM event_log WHERE idcase = 'declaration 76667';
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaration 49464' EXCEPT SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaration 76667';
SELECT e1.activity, e1.resource, e1.cost FROM event_log e1 WHERE e1.id = 49464 EXCEPT SELECT e2.activity, e2.resource, e2.cost FROM event_log e2 WHERE e2.id = 76667;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity = 'declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT e.name, COUNT(*) as num_declarations FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity ='request declaration' GROUP BY e.name HAVING COUNT(*) > 2;
SELECT idcase FROM event_log WHERE activity ='request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity ='request payment' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT DISTINCT idcase FROM event_log WHERE activity ='request payment' AND timestamp >= '2017-05-01 00:00:00' AND timestamp < '2017-05-11 00:00:00';
SELECT DISTINCT idcase FROM event_log WHERE activity ='request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity ='request payment' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT DISTINCT idcase FROM event_log WHERE activity ='request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT idcase FROM event_log WHERE activity = 'payment request' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10' GROUP BY idcase;
SELECT * FROM event_log WHERE activity = 'payment request' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_employees FROM event_log WHERE activity = 'processed' GROUP BY idcase
SELECT idcase FROM ( SELECT idcase, COUNT(*) AS total_rows FROM event_log GROUP BY idcase ) AS total_rows_per_case WHERE total_rows = ( SELECT COUNT(*) FROM event_log WHERE idcase = total_rows_per_case.idcase AND activity LIKE '%Christopher%' );
SELECT DISTINCT "idcase" FROM "event_log" WHERE "activity" = 'handled' AND "idcase" LIKE '%Christopher%';
SELECT * FROM event_log WHERE idcase = 'CHRISTOPHER';
SELECT * FROM event_log WHERE resource = 'Christopher' GROUP BY resource, activity HAVING COUNT(DISTINCT id) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Christopher');
SELECT * FROM event_log WHERE resource = 'Christopher' AND idcase IS NULL;
SELECT idcase FROM event_log WHERE activity LIKE '%collaborator Christopher%' AND activity NOT LIKE '%collaborator%[^C]%[^h]%[^r]%[^i]%[^s]%[^t]%[^o]%[^p]%[^e]%[^r]%[^ ]%' GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT pi.process_instance_id FROM event_log el JOIN process_instances pi ON el.idcase = pi.process_instance_id WHERE el.activity = 'COMPLETED' AND pi.employee = 'Christopher'
SELECT A SQL question! Unfortunately, the provided database schema does not contain any information about Christopher or his responsibilities. The schema only defines the structure of the "event_log" table. Therefore, it is not possible to determine which declarations were the sole responsibility of Christopher.
SELECT idcase, resource, COUNT(*) AS num_events FROM event_log GROUP BY idcase, resource HAVING COUNT(*) = 1;
SELECT resource, COUNT(DISTINCT idcase) AS num_idcases FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) = 1;
SELECT DISTINCT idcase FROM event_log WHERE idcase = resource;
SELECT idcase, resource, COUNT(*) as num_activities FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT e1.idcase AS collaborator, COUNT(*) AS num_instances FROM event_log e1 JOIN event_log e2 ON e1.id = e2.id - 1 WHERE e1.activity = e2.activity AND e1.resource = e2.resource AND e1.idcase = e2.idcase GROUP BY e1.idcase HAVING COUNT(*) = (SELECT MAX(num_instances) FROM ( SELECT idcase, COUNT(*) AS num_instances FROM event_log GROUP BY idcase ) AS subquery);
SELECT idcase, COUNT(*) AS num_instances FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT e.name, el.activity FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name, el.activity HAVING COUNT(DISTINCT el.id) = 1;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE_SUB(CURRENT_DATE, INTERVAL 1 DAY) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT DISTINCT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase, COUNT(*) as num_events, DATE(timestamp) as event_date FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1 ORDER BY num_events DESC;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT DATE(timestamp) AS date, COUNT(*) AS num_interventions FROM event_log GROUP BY DATE(timestamp) HAVING COUNT(*) > 1;
SELECT resource, DATE(timestamp) AS day, COUNT(*) AS count FROM event_log GROUP BY resource, DATE(timestamp) HAVING COUNT(*) > 1
SELECT "resource", "idcase", COUNT(*) AS "null_cost_events" FROM "event_log" WHERE "cost" IS NULL GROUP BY "resource", "idcase";
SELECT resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY resource;
SELECT idcase, resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY idcase, resource;
SELECT resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY resource
SELECT resource, COUNT(CASE WHEN cost IS NULL THEN 1 ELSE NULL END) AS null_cost_events FROM event_log GROUP BY resource
SELECT idcase, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY idcase
SELECT e.employee, COUNT(*) as num_interventions_without_cost FROM event_log el JOIN employees e ON el.idcase = e.idcase WHERE el.activity LIKE '%intervention%' AND el.cost IS NULL GROUP BY e.employee ORDER BY num_interventions_without_cost DESC;
SELECT el1.resource AS employee, COUNT(*) AS num_interventions FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = el2.activity WHERE el1.cost IS NOT NULL AND el2.cost IS NULL GROUP BY el1.resource
SELECT * FROM event_log WHERE activity = 'permit rejected by director';
SELECT * FROM event_log WHERE activity = 'permit rejected by director';
SELECT * FROM event_log WHERE activity = 'permit rejected by director';
SELECT * FROM event_log WHERE activity = 'permit rejected by the director';
SELECT * FROM event_log WHERE activity = 'permit rejected by director';
SELECT * FROM event_log WHERE activity = 'permit rejected by director';
SELECT activity FROM event_log WHERE activity LIKE '%permit rejected%' AND activity LIKE '%director%' AND activity NOT LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%reject permit%' AND resource LIKE '%director%';
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log WHERE activity = 'declaration handling' GROUP BY DATE(timestamp) ORDER BY date;
SELECT * FROM event_log WHERE cost > 1000 AND (activity LIKE '%supervisor%' OR activity LIKE '%director%');
SELECT el.activity FROM event_log el JOIN activity_requirements ar ON el.activity = ar.activity WHERE ar.requirement_level IN ('supervisor', 'director') AND el.cost > 1000;
SELECT el.activity, el.timestamp, el.resource, el.cost, p.supervisor, p.director FROM event_log el JOIN performance p ON el.idcase = p.id WHERE el.cost > 1000 AND (p.supervisor IS NOT NULL OR p.director IS NOT NULL)
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%director%' AND cost > 1000;
SELECT * FROM event_log WHERE cost > 1000 AND activity LIKE '%supervisor%' OR activity LIKE '%director%';
SELECT el.activity FROM event_log el JOIN activity_requirements ar ON el.activity = ar.activity WHERE ar.requirement_level IN ('supervisor', 'director') AND el.cost > 1000;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_interventions FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource;
SELECT Based on the provided database schema, it seems that the "event_log" table stores information about various activities or actions performed by unknown entities (not necessarily employees). The table does not contain any information about employees. Therefore, it is not possible to determine how many actions were determined for each employee to perform based on the provided schema. The schema does not contain any information about employees or their actions. If you could provide more context or clarify the schema, I may be able to help you better.
SELECT c.case_name, COUNT(el.id) AS num_activities FROM event_log el JOIN cases c ON el.idcase = c.id WHERE el.activity LIKE '%Alexis%' AND c.assignee = 'Alexis' GROUP BY c.case_name ORDER BY c.case_name;
SELECT c.case_name, COUNT(el.id) AS num_activities FROM event_log el JOIN case c ON el.idcase = c.id WHERE c.lead_user = 'Alexis' GROUP BY c.case_name
SELECT u.name, e.idcase, COUNT(*) AS num_activities FROM event_log e JOIN users u ON e.idcase = u.idcase WHERE u.name = 'Alexis' GROUP BY u.name, e.idcase ORDER BY u.name, e.idcase;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%Alexis%' -- Assuming Alexis is part of the activity name GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) as num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%Alexis%' GROUP BY idcase ORDER BY num_activities DESC;
SELECT t.task_name, el.idcase AS process_instance_id FROM event_log el JOIN task t ON el.id = t.process_instance_id WHERE el.activity LIKE '%Alexis%' AND el.resource LIKE '%Alexis%' ORDER BY el.idcase;
SELECT d.name AS declaration, COUNT(*) AS num_actions FROM event_log el JOIN declarations d ON el.idcase = d.id WHERE el.activity LIKE '%Alexis%' -- filter by collaborator Alexis GROUP BY d.name ORDER BY num_actions DESC;
SELECT COUNT(DISTINCT el1.idcase) AS num_cases FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp < el2.timestamp WHERE el1.activity = 'permit final approved by supervisor' AND el2.activity ='start trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by supervisor' AND id IN ( SELECT id FROM event_log WHERE activity ='start trip' )
SELECT COUNT(*) FROM event_log AS a, event_log AS b WHERE a.activity = 'permit final approved by supervisor' AND b.activity ='start trip' AND a.id < b.id;
SELECT COUNT(*) FROM event_log AS e1 WHERE EXISTS ( SELECT 1 FROM event_log AS e2 WHERE e2.activity ='start trip' AND e2.timestamp > e1.timestamp ) AND e1.activity = 'permit final approved by supervisor';
SELECT COUNT(*) FROM event_log AS e1 JOIN event_log AS e2 ON e1.timestamp > e2.timestamp WHERE e1.activity ='start trip' AND e2.activity = 'permit final approved by supervisor';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%start of trip%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE '%permit with final approval from supervisor%');
SELECT COUNT(*) FROM event_log WHERE activity = 'permit with final approval from the supervisor' AND EXISTS ( SELECT 1 FROM event_log WHERE activity ='start of the trip' AND timestamp > (SELECT timestamp FROM event_log WHERE activity = 'permit with final approval from the supervisor') )
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration' AND idcase LIKE '%Supervisor%' AND timestamp < (SELECT timestamp FROM event_log WHERE activity = 'Trip Start');
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp NOT LIKE '%2017-12-12%';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp < '2017-12-12 00:00:00' OR timestamp > '2017-12-12 00:00:00';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp NOT LIKE '%2017-12-12%';
SELECT * FROM event_log WHERE activity = 'end trip' AND timestamp NOT LIKE '%2017-12-12%';
SELECT activity FROM event_log WHERE activity LIKE '%end%' OR activity LIKE '%finish%' AND timestamp NOT LIKE '%2017-12-12%';
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT p.name, COUNT(el.activity) AS num_activities FROM event_log el JOIN people p ON el.idcase = p.id GROUP BY p.name ORDER BY num_activities DESC;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_actions FROM event_log WHERE activity LIKE '%processing declarations%' GROUP BY resource;
SELECT resource, COUNT(*) AS num_actions FROM event_log WHERE activity LIKE '%trip declaration%' -- adjust this to match your specific activity names GROUP BY resource ORDER BY num_actions DESC;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource ORDER BY activity_count DESC;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource;
SELECT e.name, COUNT(el.id) AS num_actions FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name ORDER BY num_actions DESC;
SELECT DISTINCT activity FROM event_log WHERE resource!= 'Virginia';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Virginia' AND activity NOT IN ( SELECT activity FROM event_log WHERE resource = 'Virginia' GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Virginia' AND activity IS NULL) )
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT idcase FROM event_log WHERE idcase LIKE '%Virginia%' ) ORDER BY activity;
SELECT DISTINCT a.activity FROM (SELECT DISTINCT activity FROM "event_log") a LEFT JOIN "event_log" el ON a.activity = el.activity WHERE el.activity IS NULL AND a.activity NOT LIKE '%Virginia%';
SELECT DISTINCT activity FROM event_log WHERE idcase NOT LIKE '%Virginia%' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase LIKE '%Virginia%' ) ORDER BY activity;
SELECT DISTINCT activity FROM event_log WHERE idcase = 'Virginia';
SELECT AVG("cost") FROM "event_log" WHERE "activity" ='rejected';
SELECT AVG("cost") FROM "event_log" WHERE "activity" ='rejected';
SELECT AVG(e.cost) FROM event_log e WHERE e.activity ='rejected' GROUP BY e.idcase HAVING COUNT(e.activity) > 0;
SELECT AVG(cost) FROM event_log WHERE activity ='rejected';
SELECT AVG("cost") FROM "event_log" WHERE "activity" ='rejected';
SELECT AVG("cost") FROM "event_log" WHERE "activity" = 'travel declaration' AND "idcase" ='rejected';
SELECT AVG("cost") AS average_cost FROM "event_log" WHERE "activity" IN ('REJECTED', 'DENIED') AND "resource" LIKE '%travel declaration%';
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'declaration approved by supervisor' AND idcase = el.idcase ORDER BY timestamp ASC LIMIT 1), (SELECT timestamp FROM event_log WHERE activity!= 'declaration approved by supervisor' AND idcase = el.idcase ORDER BY timestamp ASC LIMIT 1) ) AS duration FROM event_log el WHERE activity = 'declaration approved by supervisor' GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'declaration approved by supervisor' AND idcase = e.idcase), (SELECT MAX(timestamp) FROM event_log WHERE activity = 'declaration approved by supervisor' AND idcase = e.idcase)) AS duration FROM event_log e WHERE activity = 'declaration approved by supervisor' GROUP BY idcase;
SELECT idcase, MIN(timestamp) AS start_timestamp, MAX(timestamp) AS end_timestamp, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration_in_seconds FROM event_log WHERE activity = 'declaration approved by supervisor' GROUP BY idcase;
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'previous_activity' AND idcase = el.idcase ORDER BY timestamp DESC LIMIT 1), (SELECT timestamp FROM event_log WHERE activity = 'declaration_approved_by_supervisor' AND idcase = el.idcase ORDER BY timestamp ASC LIMIT 1)) AS duration FROM event_log el WHERE activity = 'declaration_approved_by_supervisor' ORDER BY idcase;
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'declaration submitted'), (SELECT MAX(timestamp) FROM event_log WHERE activity = 'declaration approved by supervisor')) AS duration FROM event_log WHERE activity = 'declaration approved by supervisor' GROUP BY idcase
SELECT activity, COUNT(*) AS count FROM event_log WHERE activity LIKE '%approval%' AND resource LIKE '%supervisor%' AND activity NOT LIKE '%rejected%' GROUP BY activity ORDER BY count DESC;
SELECT SUM(cost) AS total_cost, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS total_time FROM event_log WHERE activity LIKE '%declaration%' AND activity LIKE '%approved%' AND activity LIKE '%supervisor%' GROUP BY idcase;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected' AND resource = 'pre-approval stage';
SELECT COUNT(*) FROM event_log WHERE activity ='reject' AND resource = 'pre-approver' AND idcase = 'declaration';
SELECT "idcase", "resource", "timestamp" FROM "event_log" WHERE "activity" = 'end trip' ORDER BY "resource";
SELECT idcase, timestamp FROM event_log WHERE activity = 'end trip' ORDER BY resource;
SELECT resource, timestamp FROM event_log WHERE activity = 'end trip' ORDER BY resource;
SELECT resource, timestamp FROM event_log WHERE activity = 'end trip' ORDER BY resource;
SELECT "resource", "timestamp", "activity" FROM "event_log" WHERE "activity" LIKE '%end of trip%' OR "activity" LIKE '%trip ended%' ORDER BY "resource";
SELECT e.id, e.activity, e.timestamp, e.resource, e.cost, e.idcase, (SELECT resource FROM event_log WHERE activity = 'trip started' AND id < e.id ORDER BY id DESC LIMIT 1) AS declaration_code, (SELECT timestamp FROM event_log WHERE activity = 'trip ended' AND id < e.id ORDER BY id DESC LIMIT 1) AS trip_end_date FROM event_log e WHERE e.activity = 'trip ended' ORDER BY (SELECT resource FROM event_log WHERE activity = 'trip started' AND id < e.id ORDER BY id DESC LIMIT 1) ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_interventions FROM event_log WHERE activity LIKE '%intervention%' -- adjust this condition to match your specific data GROUP BY idcase;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(DISTINCT "idcase") FROM "event_log" WHERE "activity" = 'end trip' AND "timestamp" BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'end trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'trip_end' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'end of trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity ='send reminder' ORDER BY timestamp;
SELECT idcase AS "Case Identifier", resource AS "Resource", id AS "Event Identifier", timestamp AS "Completion Date" FROM event_log WHERE activity ='send reminder' ORDER BY timestamp;
SELECT el.id, el.activity, el.resource, el.timestamp FROM event_log el WHERE el.activity ='send reminder' ORDER BY el.timestamp;
SELECT el.id, el.activity, el.resource, el.idcase, el.timestamp FROM event_log el WHERE el.activity ='send reminder' ORDER BY el.timestamp;
SELECT el.idcase AS "Case Identifier", el.id AS "Event Identifier", el.resource AS "Associated Resource", el.timestamp AS "Completion Date" FROM event_log el WHERE el.activity ='send reminder' ORDER BY el.timestamp;
SELECT el.idcase AS "Case ID", el.resource AS "Resource", el.timestamp AS "Completion Date", el.activity AS "Activity" FROM event_log el WHERE el.activity ='send reminder' ORDER BY el.timestamp;
SELECT activity, resource, id, timestamp FROM event_log WHERE activity = 'DECLARE' AND cost > 0 ORDER BY timestamp;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%declaration%';
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT id) > 200;
SELECT DISTINCT resource FROM event_log WHERE activity = 'travel declaration' GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log WHERE activity = 'travel_declaration' GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%travel declaration%' -- adjust this pattern to match your actual activity names GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log WHERE activity = 'travel declaration' GROUP BY resource HAVING COUNT(*) > 200;
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT "resource") AS "Number of resources" FROM "event_log";
SELECT Based on the provided database schema, there is no information about employees or handling declarations. The table "event_log" appears to be a log of events related to activities, resources, and costs, but it does not contain any information about employees or their roles. To answer the question, we would need additional information or tables that relate to employees and their roles. If you could provide more context or additional tables, I'd be happy to help you with the query.
SELECT COUNT(DISTINCT resource) AS num_people FROM event_log WHERE activity LIKE '%declaration%';
SELECT A SQL question! Unfortunately, the database schema doesn't provide information about people associated with activities. The schema only includes columns for: 1. id: a unique identifier for each event log entry 2. activity: the type of activity that occurred 3. timestamp: the date and time the activity occurred 4. resource: the resource involved in the activity 5. cost: the cost associated with the activity 6. idcase: an additional identifier (perhaps a case ID?) To answer the question, we would need additional information about people associated with activities, such as a person table with a foreign key referencing the event_log table. Without that information, we can't provide a meaningful answer. If you meant to ask a different question, please feel free to clarify!
SELECT A SQL question! Unfortunately, the database schema doesn't provide information about people associated with performing activities. The schema only includes columns for: 1. id: a unique identifier for each log entry 2. activity: the type of activity performed 3. timestamp: the date and time the activity was performed 4. resource: the resource used for the activity 5. cost: the cost associated with the activity 6. idcase: an additional identifier (perhaps a case ID?) To answer the question, we would need additional information about people, such as their names, IDs, or roles. Without that information, we can't determine how many people are associated with performing activities in the event log. So, the answer would be: "We can't determine the number of people associated with performing activities in the event log based on the provided schema."
SELECT activity FROM event_log WHERE activity LIKE '%declaration%' OR activity LIKE '%management%';
SELECT COUNT(DISTINCT resource) AS num_people FROM event_log WHERE activity LIKE '%declaration%';
SELECT COUNT(DISTINCT resource) AS num_employees FROM event_log WHERE activity LIKE '%declaration handling%';
SELECT activity FROM event_log WHERE activity LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%declaration%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity COLLATE NOCASE LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%declaration%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%declaration%';
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log WHERE activity LIKE '%travel declaration%' -- adjust this pattern to match your activity names GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM ( SELECT idcase, COUNT(*) AS cost_count FROM event_log GROUP BY idcase HAVING COUNT(CASE WHEN cost IS NULL THEN 1 ELSE NULL END) = COUNT(*) ) AS subquery
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0 OR cost IS NULL
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declare%';
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity COLLATE NOCASE LIKE '%permit%' OR activity COLLATE NOCASE LIKE '%declaration%';
SELECT * FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration of rejection of responsibility of the director';
SELECT AVG("cost") AS mean_cost FROM "event_log";
SELECT AVG("cost") AS mean_cost FROM "event_log";
SELECT AVG("cost") AS mean_cost FROM "event_log";
SELECT AVG("cost") AS mean_cost FROM "event_log";
SELECT AVG("cost") AS average_cost FROM "event_log";
SELECT AVG("cost") AS "Mean Cost" FROM "event_log";
SELECT AVG("cost") AS "Mean Cost" FROM "event_log";
SELECT AVG("cost") AS "Mean Cost" FROM "event_log";
SELECT AVG("cost") AS "Mean Cost" FROM "event_log";
SELECT AVG("cost") AS mean_cost FROM "event_log" WHERE "activity" LIKE '%declaration%' COLLATE NOCASE;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT e.name, COUNT(*) AS num_declarations FROM event_log el JOIN employees e ON el.idcase = e.employee_id GROUP BY e.name
SELECT COUNT(*) FROM event_log JOIN users ON event_log.idcase = users.id WHERE users.username = 'Peter';
SELECT COUNT(*) FROM event_log JOIN users ON event_log.idcase = users.id WHERE users.username = 'Peter';
SELECT A SQL question! Unfortunately, the database schema doesn't provide any information about the user "Peter" or their work. The schema only defines the columns for the "event_log" table, which includes "activity", "resource", and "idcase", but no specific information about users or their work. To answer the question, we would need additional information, such as a "user" table or a "work" table that links to the "event_log" table. Without that information, we can't provide a specific answer. If you could provide more context or clarify what you mean by "Peter's work", I'd be happy to help you craft a SQL query to answer your question!
SELECT e.name, COUNT(*) AS num_actions FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name
SELECT A SQL question! Unfortunately, the database schema provided doesn't include a table for people or declarations, so we can't directly answer the question. The event_log table seems to contain records of various activities, but it doesn't have a clear connection to people or declarations. To answer the question, we would need additional information about the relationships between the tables. For example, we might need a people table with a column id and a declarations table with a column id and a foreign key referencing the people table. If you can provide more context or clarify the relationships between the tables, I'd be happy to help you write a SQL query to answer the question.
SELECT e.name FROM employees e JOIN ( SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) c ON e.id = c.idcase
SELECT c.assigned_to, COUNT(*) AS num_cases FROM event_log el JOIN cases c ON el.idcase = c.id GROUP BY c.assigned_to HAVING COUNT(*) > 3;
SELECT e.employee_id, COUNT(*) as num_cases FROM event_log el JOIN cases c ON el.idcase = c.case_id GROUP BY e.employee_id HAVING COUNT(*) > 3;
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource HAVING COUNT(*) > 3;
SELECT e.id, e.name, COUNT(el.id) AS num_instances FROM employees e JOIN event_log el ON e.id = el.idcase GROUP BY e.id, e.name HAVING COUNT(el.id) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity ='request payment' GROUP BY idcase ORDER BY num_events;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity ='request payment' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity LIKE '%request payment%' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity ='request payment' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity ='request payment' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity ='request payment' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_activities, idcase FROM event_log GROUP BY idcase ORDER BY num_activities ASC;
SELECT idcase, COUNT(*) AS num_actions, id FROM event_log WHERE activity = 'payment_request' GROUP BY idcase ORDER BY num_actions;
SELECT timestamp FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee') ORDER BY timestamp;
SELECT timestamp FROM event_log WHERE activity IN ('end trip', 'closed') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('end trip', 'declaration rejected by employee') ORDER BY timestamp;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('trip_end', 'declaration_rejected') ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity IN ('End of Trip', 'Rejection of Declaration') AND resource = 'Employee' ORDER BY timestamp ASC;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_performances FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_performances FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) as activity_occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT e.name, COUNT(el.id) AS num_declarations FROM event_log el JOIN employees e ON el.idcase = e.idcase GROUP BY e.name ORDER BY e.name;
SELECT e.name, COUNT(el.activity) AS "Number of actions" FROM event_log el JOIN employees e ON el.idcase = e.name GROUP BY e.name ORDER BY e.name;
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT activity FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT activity FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT el.id, el.activity, el.resource, el.cost FROM event_log el WHERE el.activity LIKE 'DECLARATION PROCESSING%' AND el.cost BETWEEN 50 AND 400;
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration saved by employee';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration saved by employee';
SELECT Based on the provided database schema, it seems that the "event_log" table does not contain information about employees or saved declarations. The table appears to log various activities related to resources, with columns for activity, timestamp, resource, cost, and idcase. To answer the question "Which employees registered a saved declaration?", we would need additional information about the employees and their activities. However, based on the provided schema, we cannot determine which employees registered a saved declaration. If you could provide more information about the employees and their activities, I'd be happy to help you craft a SQL query to answer this question.
SELECT e.name FROM employees e JOIN declarations d ON e.id = d.employee_id WHERE d.status ='saved';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT * FROM event_log WHERE timestamp LIKE '%2018-04-12%' AND activity LIKE 'performance_end';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE timestamp <= '2018-04-12' AND activity IN ( SELECT activity FROM event_log WHERE timestamp <= '2018-04-12' GROUP BY activity HAVING COUNT(*) > 1 )
SELECT DISTINCT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE timestamp >= '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT resource FROM event_log WHERE activity LIKE '%declaration processing%' AND timestamp = '2018-04-12 00:00:00';
SELECT el.id, el.activity, el.timestamp AS "performance end date" FROM event_log el WHERE el.activity IN ('permit final approved by supervisor', 'declaration approved by supervisor') ORDER BY el.timestamp;
SELECT el.id, el.activity, el.timestamp AS end_date FROM event_log el WHERE el.activity IN ('permit final approved by supervisor', 'declaration approved by supervisor') ORDER BY el.timestamp;
SELECT el.id, el.activity, el.timestamp AS "performance_end_date" FROM event_log el WHERE el.activity IN ('permit final approved by the supervisor', 'declaration approved by the supervisor') ORDER BY el.timestamp;
SELECT el.id, el.activity, MAX(el.timestamp) AS end_date FROM event_log el WHERE el.activity IN ('permit final approved by supervisor', 'declaration approved by supervisor') GROUP BY el.id, el.activity ORDER BY end_date;
SELECT el.id, el.activity, el.timestamp AS "performance end date" FROM event_log el WHERE el.activity IN ('permit final approved by supervisor', 'declaration approved by supervisor') ORDER BY el.timestamp;
SELECT el.id, el.activity, el.timestamp AS "performance_end_date" FROM event_log el WHERE el.activity IN ('permit final approved by supervisor', 'declaration approved by supervisor') ORDER BY el.timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity LIKE '%final approval%' OR activity LIKE '%approval of declaration%' AND activity LIKE '%supervisor%' ORDER BY timestamp;
SELECT activity AS "Action Identifier", activity AS "Associated Activity", timestamp AS "Completion Date" FROM event_log WHERE activity IN ('PERMIT_APPROVED', 'DECLARATION_APPROVED') ORDER BY timestamp DESC;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT el.activity, el.timestamp, el.resource, el.cost, el.idcase FROM event_log el WHERE el.idcase IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit final approved by a director';
SELECT COUNT(*) FROM event_log WHERE activity = 'processing of declarations' AND resource = 'final permit' AND idcase = 'director';
SELECT COUNT(*) FROM event_log WHERE activity = 'final permit approved by a director';
SELECT * FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp, resource, cost FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity ='start trip' AND resource LIKE '%s';
SELECT DISTINCT timestamp FROM event_log WHERE activity ='start of trip' AND resource LIKE '%s' AND activity LIKE '%start of trip%';
SELECT DISTINCT timestamp FROM event_log WHERE activity = 'trip start' AND resource LIKE '%s';
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT e.name AS employee_name, el.activity, SUM(el.cost) AS total_cost FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name, el.activity ORDER BY e.name, el.activity;
SELECT COUNT(*) FROM event_log WHERE activity IN ('start trip', 'end trip');
SELECT COUNT(CASE WHEN activity ='start trip' THEN 1 ELSE NULL END) AS start_trip_count, COUNT(CASE WHEN activity = 'end trip' THEN 1 ELSE NULL END) AS end_trip_count FROM event_log;
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%start trip%' OR activity LIKE '%end trip%';
SELECT COUNT(*) FROM event_log WHERE activity IN ('start trip', 'end trip');
SELECT activity, COUNT(*) as count FROM event_log WHERE activity IN ('start trip', 'end trip') GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE activity IN ('start trip', 'end trip');
SELECT activity, COUNT(*) as count FROM event_log WHERE activity IN ('start trip', 'end trip') GROUP BY activity;
SELECT activity, COUNT(*) as count FROM event_log WHERE activity IN ('start trip', 'end trip') GROUP BY activity;
SELECT COUNT(DISTINCT idcase) AS num_declarations FROM event_log WHERE activity IN ('trip_start', 'trip_end');
SELECT COUNT(*) FROM event_log WHERE activity IN ('begin trip', 'end trip');
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log WHERE activity IS NOT NULL GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log WHERE activity LIKE '%travel declaration%' AND id IN ( SELECT id FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ) ORDER BY activity;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log WHERE id = (SELECT MAX(id) FROM event_log)
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT "resource", "activity" FROM "event_log" ORDER BY "timestamp" DESC LIMIT 1;
SELECT "activity", "idcase" FROM "event_log" WHERE "resource" LIKE '%travel declaration process%' COLLATE NOCASE ORDER BY "timestamp" DESC LIMIT 1;
SELECT el2.activity, el2.resource, el2.timestamp FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = 'end trip' AND el1.timestamp < el2.timestamp ORDER BY el2.timestamp;
SELECT el1.activity, el1.idcase, el2.id AS responsible_id FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity = 'end trip' AND el1.timestamp = ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'end trip' ) AND el1.timestamp < el2.timestamp ORDER BY el1.timestamp;
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.id > el2.id WHERE el2.activity = 'end trip' ORDER BY el1.timestamp;
SELECT el1.* FROM event_log el1 JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'end trip' GROUP BY idcase ) el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.max_timestamp
SELECT el1.activity, el1.timestamp, el1.resource, el1.cost, el2.activity AS responsible_activity, el2.resource AS responsible_resource FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.id < el2.id WHERE el1.activity = 'end trip' ORDER BY el1.timestamp;
SELECT el1.activity, el1.resource, el1.cost, el1.idcase, p.name FROM event_log el1 JOIN person p ON el1.idcase = p.idcase WHERE el1.timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'end trip' ) ORDER BY el1.timestamp;
SELECT el1.activity AS case_event, el2.activity AS responsible_activity, el2.resource AS responsible_person FROM event_log el1 JOIN event_log el2 ON el1.id > el2.id WHERE el1.activity = 'end trip' ORDER BY el1.id;
SELECT el2.activity, el2.idcase, p.name FROM event_log el2 JOIN event_log el1 ON el2.id > el1.id JOIN person p ON el2.idcase = p.id WHERE el1.activity = 'end trip' ORDER BY el2.timestamp;
SELECT el1.activity, el1.resource, el1.idcase, el2.activity AS responsible_activity FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.timestamp WHERE el2.activity = 'end trip' ORDER BY el1.timestamp;
SELECT el2.activity, el2.resource, el2.timestamp, el2.cost, el2.idcase, u.username FROM event_log el2 JOIN event_log el1 ON el1.idcase = el2.idcase AND el1.activity = 'end trip' AND el1.timestamp < el2.timestamp JOIN users u ON el2.idcase = u.idcase WHERE el1.id IS NOT NULL ORDER BY el2.timestamp;
SELECT el.activity, u.name AS responsible FROM event_log el JOIN users u ON el.idcase = u.id WHERE el.activity!= 'end trip' AND el.timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'end trip' ) ORDER BY el.timestamp;
SELECT el2.activity, el2.resource, el2.idcase, el1.id AS end_trip_id FROM event_log el1 JOIN event_log el2 ON el1.id < el2.id WHERE el1.activity = 'end trip' ORDER BY el1.id;
SELECT el2.activity, el2.resource, el2.timestamp, el1.idcase AS case_id FROM event_log el1 JOIN event_log el2 ON el1.id < el2.id WHERE el1.activity = 'end trip' ORDER BY el1.id, el2.id;
SELECT * FROM event_log WHERE id > ( SELECT id FROM event_log WHERE activity = 'end trip' ) ORDER BY timestamp;
SELECT * FROM event_log WHERE id > ( SELECT id FROM event_log WHERE activity = 'end trip' ) ORDER BY timestamp;
SELECT el.activity, el.timestamp, el.resource, el.cost, el.idcase, pu.name AS responsible_person FROM event_log el JOIN person_user pu ON el.idcase = pu.idcase WHERE el.activity NOT LIKE 'Trip Registration%' AND el.idcase IN (SELECT idcase FROM event_log WHERE activity LIKE 'Trip Registration%') ORDER BY el.timestamp;
SELECT e1.activity AS "Action", e1.resource AS "Resource", e1.timestamp AS "Timestamp", e1.cost AS "Cost", e1.idcase AS "Case", e1.id AS "Employee ID" FROM event_log e1 WHERE e1.idcase IN ( SELECT idcase FROM event_log e2 WHERE e2.activity = 'End of trip' ) ORDER BY e1.timestamp;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS non_end_trip_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) - (SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND event_log.resource = e.resource) AS non_end_trip_events FROM event_log e GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) - (SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND event_log.resource = e.resource) AS non_end_trip_events FROM event_log e GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) - (SELECT COUNT(*) FROM event_log WHERE activity = 'end trip' AND event_log.resource = e.resource) AS non_end_trip_events FROM event_log e GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, activity, COUNT(*) as count FROM event_log WHERE activity!= 'end trip' GROUP BY resource, activity
SELECT resource, SUM(cost) AS total_cost FROM event_log WHERE activity!= 'end trip' GROUP BY resource ORDER BY total_cost DESC;
SELECT resource, COUNT(*) AS non_end_trip_events FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource;
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'end trip' GROUP BY resource
SELECT resource, SUM(CASE WHEN activity!= 'end trip' THEN 1 ELSE 0 END) AS events_amount FROM event_log GROUP BY resource;
SELECT COUNT(*) FROM event_log WHERE activity = 'Processing travel declaration' AND activity!= 'End of trip';
SELECT idcase, COUNT(*) AS num_actions FROM event_log WHERE activity!= 'END TRIP' GROUP BY idcase;
SELECT DISTINCT idcase FROM event_log ORDER BY (SELECT timestamp FROM event_log WHERE idcase = e.idcase ORDER BY timestamp LIMIT 1) DESC;
SELECT DISTINCT idcase, MIN(timestamp) AS start_date FROM event_log GROUP BY idcase ORDER BY start_date DESC;
SELECT DISTINCT idcase FROM event_log ORDER BY timestamp ASC;
SELECT idcase, MIN(timestamp) AS start_date FROM event_log GROUP BY idcase ORDER BY start_date DESC;
SELECT idcase, MIN(timestamp) AS first_timestamp, activity FROM event_log WHERE activity LIKE '%travel declaration%' COLLATE NOCASE GROUP BY idcase ORDER BY first_timestamp;
SELECT id FROM event_log WHERE activity LIKE '%travel%' OR activity LIKE '%declaration%' ORDER BY timestamp ASC;
SELECT COUNT(*) FROM event_log WHERE activity ='request payment';
SELECT COUNT(*) FROM event_log WHERE activity ='request payment';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='request payment';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='request payment';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='request payment';
SELECT COUNT(DISTINCT "idcase") FROM "event_log" WHERE "activity" = 'payment request';
SELECT COUNT(*) FROM event_log WHERE activity = 'payment_request';
SELECT idcase FROM event_log WHERE activity = 'declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT e.idcase FROM event_log e JOIN ( SELECT MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'Director gave final approval for a declaration' ) AS max_timestamp_query ON e.timestamp = max_timestamp_query.max_timestamp WHERE e.activity = 'Director gave final approval for a declaration';
SELECT * FROM event_log WHERE activity = 'declaration' AND idcase IS NOT NULL ORDER BY timestamp DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT r1.resource AS resource, COUNT(*) AS count FROM event_log r1 JOIN event_log r2 ON r1.resource = r2.resource AND r1.activity = 'declaration approved by administration' AND r2.activity = 'declaration approved by administration' GROUP BY r1.resource ORDER BY count DESC LIMIT 1;
SELECT e.id, e.activity, e.resource, COUNT(*) as num_approvals FROM event_log e JOIN ( SELECT DISTINCT id, "activity" as admin_activity FROM event_log WHERE activity = 'login' AND "resource" LIKE 'admin%' ) a ON e.id = a.id WHERE e.activity = 'approve declaration' GROUP BY e.id, e.activity, e.resource ORDER BY num_approvals DESC LIMIT 1;
SELECT e.name, COUNT(*) as total_approvals FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity = 'approves declaration' GROUP BY e.name ORDER BY total_approvals DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE activity = (SELECT MIN(activity) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) as first_event_count FROM event_log WHERE id = (SELECT MIN(id) FROM event_log) GROUP BY resource
WITH first_activity AS ( SELECT "resource", "idcase", ROW_NUMBER() OVER (PARTITION BY "idcase" ORDER BY "timestamp") AS row_num, "activity" FROM "event_log" ) SELECT "resource", COUNT(*) AS count FROM first_activity WHERE row_num = 1 GROUP BY "resource"
SELECT resource, COUNT(*) as count FROM event_log WHERE id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase ) GROUP BY resource;
SELECT resource, COUNT(*) AS first_action_count FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE idcase = event_log.idcase) GROUP BY resource
SELECT e.name, COUNT(*) as num_declarations FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity = 'first action' GROUP BY e.name
SELECT e.name, COUNT(*) as num_declarations FROM event_log el JOIN employees e ON el.resource = e.name WHERE el.activity = 'declaration process' GROUP BY e.name;
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%approved%';
SELECT COUNT(*) FROM event_log WHERE activity = 'declared' AND idcase = 'approved';
SELECT Based on the provided database schema, there is no information about "declarations" or "approval actions". The schema only includes columns for "event_log" such as "id", "activity", "timestamp", "resource", "cost", and "idcase". Therefore, it is not possible to answer the question about how many declarations approval actions appear in.
SELECT DATE(timestamp) AS date, COUNT(*) AS count FROM event_log WHERE activity ='rejected' GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS date, COUNT(*) AS num_cases FROM event_log WHERE activity ='rejected' GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS date, COUNT(*) AS num_instances FROM event_log WHERE activity ='rejected' GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, COUNT(CASE WHEN activity = 'Rejected' THEN 1 ELSE NULL END) AS rejected_cases FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS date, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity ='rejected' GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, COUNT(CASE WHEN activity ='rejected' THEN 1 ELSE NULL END) AS rejected_cases FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS date, COUNT(*) AS rejected_declarations FROM event_log WHERE activity = 'declaration_rejected' GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, COUNT(*) AS num_rejections FROM event_log WHERE activity ='rejection' GROUP BY DATE(timestamp) ORDER BY date;
SELECT idcase, COUNT(*) AS num_events, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS event_count, MAX(timestamp) AS latest_timestamp, MIN(timestamp) AS earliest_timestamp, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_activities, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_duration FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) as num_events, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) as duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT activity, SUM(cost) AS total_cost, COUNT(*) AS num_actions FROM event_log GROUP BY activity ORDER BY total_cost DESC LIMIT 5;
SELECT activity, SUM(cost) AS total_processing_time FROM event_log GROUP BY activity ORDER BY total_processing_time DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
WITH case_events AS ( SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) SELECT ce.idcase, SUM(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY ce.idcase ORDER BY timestamp))) AS duration FROM case_events ce GROUP BY ce.idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY total_duration DESC LIMIT 5;
WITH event_log AS ( SELECT idcase, MAX(timestamp) AS end_timestamp, MIN(timestamp) AS start_timestamp, COUNT(*) AS num_events FROM event_log GROUP BY idcase ) SELECT el.idcase, DATEDIFF(el.end_timestamp, el.start_timestamp) AS duration FROM event_log el WHERE el.num_events >= 20 ORDER BY duration DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_time FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS duration FROM event_log WHERE activity = 'declaration' GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, SUM(cost) AS total_cost, MAX(timestamp) - MIN(timestamp) AS processing_time FROM event_log WHERE activity LIKE '%action%' AND cost > 0 GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY total_cost DESC LIMIT 5;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity NOT IN ('request payment') AND activity LIKE '%travel declaration%' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='request payment' ORDER BY timestamp DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE activity!='request payment' ORDER BY idcase DESC LIMIT 10;
SELECT e.id, e.activity, e.timestamp, e.resource, e.cost, e.idcase FROM event_log e WHERE e.activity!='request payment' ORDER BY e.timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity NOT LIKE '%request payment%' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity = 'processing declaration' AND cost = 0 ORDER BY timestamp DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, GROUP_CONCAT(activity,'- ', timestamp,'- ', resource,'- ', cost, '\n') AS events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 ORDER BY idcase;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) <= 10;
SELECT pi.id AS process_instance_id, COUNT(el.id) AS num_events FROM event_log el JOIN process_instance pi ON el.idcase = pi.idcase GROUP BY pi.id HAVING COUNT(el.id) <= 10;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT pi.id AS process_instance_id FROM process_instance pi JOIN event_log el ON pi.id = el.idcase GROUP BY pi.id HAVING COUNT(el.id) <= 10;
SELECT DISTINCT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT t.idcase, COUNT(*) AS num_actions FROM event_log e JOIN travel_declaration t ON e.idcase = t.idcase GROUP BY t.idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT AVG("cost") FROM "event_log" WHERE "activity" = 'payment handled' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") FROM "event_log" WHERE "activity" = 'payment handled' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE timestamp < '2018-01-01' AND activity = 'payment handled';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01 00:00:00';
SELECT AVG(cost) FROM event_log WHERE activity LIKE '%payment%' AND timestamp < '2018-01-01 00:00:00';
SELECT idcase, COUNT(*) as count FROM event_log WHERE activity = 'permit' GROUP BY idcase;
SELECT idcase, COUNT(CASE WHEN activity = 'permit' THEN 1 ELSE NULL END) AS permit_count FROM event_log GROUP BY idcase;
SELECT COUNT(*) as permit_count FROM event_log WHERE activity = 'permit';
SELECT idcase, COUNT(CASE WHEN activity = 'permit' THEN 1 ELSE NULL END) AS permit_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'permit' GROUP BY idcase;
SELECT COUNT(*) as count FROM event_log WHERE activity = 'permit';
SELECT idcase, COUNT(*) AS permit_count FROM event_log WHERE activity = 'permit' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'permit' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_permits FROM event_log WHERE activity = 'permit_registered' GROUP BY idcase;
SELECT idcase, COUNT(*) as permit_count FROM event_log WHERE activity = 'declaration' AND resource = 'permit' GROUP BY idcase;
SELECT idcase, resource FROM event_log WHERE activity = 'declaration rejected by supervisor';
SELECT COUNT(DISTINCT idcase) AS num_cases, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) as num_cases FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT idcase AS supervisor_id, COUNT(*) AS num_rejections FROM event_log WHERE activity = 'REJECTION' AND idcase LIKE 'SUPERVISOR_%' GROUP BY idcase
SELECT el.id, el.activity, el.resource, el.idcase FROM event_log el WHERE el.activity = 'declared' AND el.resource ='supervisor' AND el.activity ='rejected';
SELECT activity, COUNT(id) AS num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(idcase) AS num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(idcase) AS num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_declarations FROM event_log GROUP BY activity ORDER BY num_declarations DESC;
SELECT activity, COUNT(*) AS num_declarations FROM event_log GROUP BY activity;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp >= ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT * FROM event_log WHERE timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%') AND activity LIKE 'R%';
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT * FROM event_log WHERE activity LIKE 'R%' -- filter by activity starting with 'R' AND id > (SELECT MAX(id) FROM event_log WHERE activity LIKE 'D%'); -- filter by id greater than the maximum id of actions starting with 'D'
SELECT "resource", "activity", COUNT(*) AS "count" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT resource, activity, COUNT(*) as frequency FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT resource, activity, COUNT(*) as count FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT "resource", "activity", COUNT(*) as "count" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource;
SELECT e.name, el.activity, COUNT(*) as count FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity = 'declaration processing' GROUP BY e.name, el.activity ORDER BY e.name, el.activity;
SELECT e.name, a.activity, COUNT(*) as frequency FROM event_log el JOIN university_employees e ON el.idcase = e.employee_id JOIN (SELECT DISTINCT activity FROM event_log) a ON el.activity = a.activity GROUP BY e.name, a.activity ORDER BY e.name, a.activity;
SELECT DISTINCT activity FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-07-01';
SELECT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59';
SELECT activity, resource, cost FROM event_log WHERE DATE_FORMAT(timestamp, '%Y-%m') BETWEEN '2018-01' AND '2018-06';
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT * FROM event_log WHERE resource = 'Wayne' ORDER BY timestamp;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%Wayne%';
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp = '2018-03-12 00:00:00' GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log WHERE timestamp BETWEEN '2018-03-01 00:00:00' AND '2018-03-12 23:59:59' GROUP BY activity
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp LIKE '%2018-03-12%' GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as num_cases FROM event_log WHERE timestamp BETWEEN '2018-03-12 00:00:00' AND '2018-03-12 23:59:59' AND idcase IS NOT NULL GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp <= '2018-03-12 23:59:59' -- last event ended on March 12, 2018 GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(*) as num_cases FROM event_log WHERE timestamp LIKE '%2018-03-12%' AND idcase NOT LIKE '%INCOMPLETE%' GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(*) AS num_declarations FROM event_log WHERE timestamp >= '2018-03-12 00:00:00' AND timestamp < '2018-03-13 00:00:00' GROUP BY activity;
SELECT activity, COUNT(CASE WHEN activity LIKE 'DECLARE%' THEN 1 ELSE NULL END) AS declares, COUNT(CASE WHEN activity LIKE 'ENDDECLARE%' THEN 1 ELSE NULL END) AS end_declares FROM event_log WHERE timestamp LIKE '%2018-03-12%' GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permit%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permit%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permit%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'permit%' AND id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase )
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permit%' AND id = (SELECT MIN(id) FROM event_log);
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'permit%' AND id = (SELECT MIN(id) FROM event_log WHERE activity LIKE 'permit%');
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permit%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%permit%' AND activity LIKE'start%';
SELECT COUNT(*) FROM event_log WHERE activity = 'permit' AND idcase LIKE 'TRAVEL_DECLARATION_%' AND timestamp = ( SELECT MIN(timestamp) FROM event_log WHERE activity = 'permit' AND idcase LIKE 'TRAVEL_DECLARATION_%' );
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('request payment', 'payment handled')
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('request payment', 'payment handled')
SELECT * FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('request payment', 'payment handled') GROUP BY idcase )
SELECT * FROM event_log WHERE activity NOT IN ('request payment', 'payment handled') ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('request payment', 'payment handled');
SELECT idcase FROM event_log WHERE id NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('request payment', 'payment handled') ) GROUP BY idcase HAVING COUNT(*) = 0;
SELECT c.idcase FROM ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('request payment', 'payment handled') ) AS e LEFT JOIN ( SELECT DISTINCT idcase FROM event_log ) AS c ON e.idcase = c.idcase WHERE c.idcase IS NULL;
SELECT idcase FROM event_log WHERE activity NOT IN ('request payment', 'payment handled') GROUP BY idcase HAVING COUNT(DISTINCT activity) = 0;
SELECT idcase FROM event_log WHERE activity NOT IN ('request payment', 'payment handled');
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('request payment', 'payment handled') GROUP BY idcase )
SELECT COUNT(*) FROM event_log WHERE activity NOT IN ('payment made', 'payment request');
CREATE TABLE "payment_requests" ( "id" int, "request_date" DATETIME, "amount" NUMERIC, "request_status" TEXT COLLATE NOCASE, PRIMARY KEY("id") ); CREATE TABLE "payments" ( "id" int, "payment_date" DATETIME, "amount" NUMERIC, "payment_status" TEXT COLLATE NOCASE, "payment_request_id" int, FOREIGN KEY ("payment_request_id") REFERENCES "payment_requests"("id") );
SELECT timestamp, resource, activity FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT timestamp, resource, activity FROM event_log WHERE activity IN ('start trip', 'declaration submitted by employee') ORDER BY timestamp, resource;
SELECT e.timestamp, e.idcase, e.activity, e.resource, e.cost FROM event_log e WHERE e.activity LIKE '%initiate travel%' OR e.activity LIKE '%request declaration%' ORDER BY e.timestamp, e.idcase;
SELECT e.timestamp, e.activity, e.resource, e.cost, e.idcase, (SELECT name FROM employees WHERE employees.id = e.id) AS employee_name FROM event_log e WHERE e.activity LIKE'start of declaration processing%' ORDER BY e.timestamp, (SELECT name FROM employees WHERE employees.id = e.id);
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) as frequency FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_associations FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT e.name, COUNT(*) as num_saves FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity ='saving a travel declaration' GROUP BY e.name ORDER BY e.name;
SELECT e.name, COUNT(*) AS num_declarations FROM event_log el JOIN employees e ON el.resource = e.id WHERE el.activity ='saving a declaration' GROUP BY e.name ORDER BY e.name;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_instances FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_instances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT action, COUNT(*) AS count FROM event_log GROUP BY action;
SELECT activity, COUNT(*) as num_declarations FROM event_log GROUP BY activity;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase;
SELECT "activity", COUNT(*) AS "count" FROM "event_log" WHERE "idcase" LIKE '%travel_declaration%' GROUP BY "activity" ORDER BY "count" DESC;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY resource;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY idcase;
SELECT resource, COUNT(CASE WHEN activity IN ('end trip', 'payment handled') THEN 1 ELSE NULL END) AS completion_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(CASE WHEN activity IN ('end trip', 'payment handled') THEN 1 ELSE NULL END) AS completion_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY resource;
SELECT resource, COUNT(*) AS completion_count FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY resource;
SELECT resource, COUNT(*) AS num_actions FROM event_log WHERE activity IN ('end of trip', 'payment') AND idcase = 'travel declaration' -- assuming idcase is the case ID for travel declarations GROUP BY resource
SELECT "idcase" AS employee, COUNT(*) AS completion_count FROM "event_log" WHERE "activity" IN ('Trip End', 'Payment') GROUP BY "idcase" ORDER BY completion_count DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaration rejected by pre-approver' GROUP BY resource ORDER BY count;
SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE activity = 'declaration rejected by pre-approver' GROUP BY resource
SELECT resource, COUNT(*) AS first_declaration_rejected_count FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaration rejected by pre-approver' GROUP BY resource
SELECT e.name, COUNT(*) as num_rejections FROM event_log el JOIN employees e ON el.idcase = e.id JOIN cases c ON el.idcase = c.id WHERE el.activity = 'pre-approval' AND el.activity ='rejection' AND c.status ='rejected' GROUP BY e.name
SELECT e.name, COUNT(*) AS num_declarations FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity LIKE'rejection%' AND el.resource LIKE 'travel_declaration%' GROUP BY e.name
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity!= 'end trip' GROUP BY idcase
SELECT idcase, SUM(CASE WHEN activity = 'end trip' THEN 0 ELSE 1 END) OVER (PARTITION BY idcase) AS activity_occurrences FROM event_log ORDER BY idcase;
SELECT idcase, activity, COUNT(*) OVER (PARTITION BY idcase ORDER BY timestamp) AS activity_count FROM event_log WHERE activity!= 'end trip' ORDER BY idcase, activity_count;
SELECT idcase, COUNT(*) AS num_events_before_end_trip FROM event_log WHERE activity!= 'end trip' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'end trip' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'end trip' THEN timestamp END) IS NOT NULL;
SELECT idcase, activity, COUNT(*) OVER (PARTITION BY idcase ORDER BY timestamp) AS activity_count FROM event_log WHERE activity!= 'end trip' ORDER BY idcase, activity_count;
SELECT idcase, COUNT(*) AS num_events, activity FROM event_log WHERE activity!= 'end trip' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'end trip' THEN id ELSE NULL END) IS NOT NULL;
SELECT idcase, SUM(CASE WHEN activity = 'end trip' THEN 1 ELSE 0 END) AS end_trip_count, SUM(CASE WHEN activity!= 'end trip' THEN 1 ELSE 0 END) AS other_events_count FROM event_log GROUP BY idcase ORDER BY end_trip_count DESC;
SELECT idcase, activity, COUNT(*) OVER (PARTITION BY idcase ORDER BY timestamp) AS event_count, LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS previous_activity FROM event_log WHERE activity!= 'end trip' ORDER BY idcase, timestamp;
SELECT idcase, COUNT(*) AS num_actions FROM event_log WHERE activity!= 'end_of_trip' GROUP BY idcase
WITH trip_events AS ( SELECT id, activity, timestamp, LAG(activity) OVER (ORDER BY timestamp) AS prev_activity FROM event_log ) SELECT id, COUNT(*) - 1 AS num_actions_until_end_of_trip FROM trip_events WHERE activity = 'DELETE' AND prev_activity = 'CREATE' GROUP BY id;
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp < '2018-07-01';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01 00:00:00' AND timestamp < '2018-07-01 00:00:00';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01 00:00:00' AND timestamp <= '2018-06-30 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE idcase = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp < '2018-07-01';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT resource, activity FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30' AND resource = 'Thomas' ORDER BY resource, activity;
SELECT DISTINCT activity FROM event_log WHERE idcase = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp < '2018-07-01';
SELECT activity FROM event_log WHERE EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 6 AND "resource" LIKE '%Thomas%' GROUP BY activity;
SELECT idcase, timestamp FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT timestamp, idcase FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp;
SELECT * FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT pi.id, pi.start_timestamp, el.timestamp FROM process_instances pi JOIN event_log el ON pi.id = el.idcase WHERE el.activity = 'declaration rejected by supervisor' ORDER BY pi.start_timestamp, el.timestamp;
SELECT pi.id, pi.start_timestamp FROM process_instance pi JOIN ( SELECT idcase FROM event_log WHERE activity = 'declaration rejected by supervisor' ) AS rejected_events ON pi.id = rejected_events.idcase ORDER BY pi.start_timestamp ASC;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY (SELECT timestamp FROM event_log WHERE event_log.idcase = event_log.idcase ORDER BY timestamp LIMIT 1);
SELECT * FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity LIKE '%rejection%' AND resource LIKE '%supervisor%' ORDER BY timestamp ASC;
SELECT activity, timestamp FROM event_log WHERE activity LIKE '%rejected%' ORDER BY timestamp;
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-01 00:00:00';
SELECT * FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-01 00:00:00' AND NOT EXISTS ( SELECT 1 FROM event_log AS next_event WHERE next_event.idcase = event_log.idcase AND next_event.activity = 'end trip' AND next_event.timestamp <= '2018-03-01 00:00:00' )
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-01 00:00:00' GROUP BY idcase
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'end trip' AND timestamp <= '2018-03-31 23:59:59' )
SELECT * FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'end trip' AND timestamp <= '2018-03-31 23:59:59' )
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' GROUP BY idcase
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'end trip' AND timestamp <= '2018-03-31 23:59:59' )
SELECT idcase FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'end trip' AND timestamp <= '2018-03-31 23:59:59' )
SELECT * FROM event_log WHERE activity ='start trip' AND timestamp < '2018-03-31 23:59:59' AND idcase LIKE '%process performance%';
SELECT * FROM event_log WHERE activity ='start of the trip' AND timestamp < '2018-03-31 00:00:00';
SELECT * FROM event_log WHERE activity ='start of trip' AND timestamp < '2018-03-31 00:00:00' AND idcase IS NOT NULL;
SELECT idcase FROM event_log WHERE activity = 'end trip' AND NOT (activity ='request payment' OR activity = 'payment handled') GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'end trip' AND NOT (activity ='request payment' OR activity = 'payment handled') AND resource!= (SELECT MIN(resource) FROM event_log WHERE activity = 'end trip' AND idcase = event_log.idcase) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'end trip' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') ) AND COUNT(DISTINCT resource) > 1 GROUP BY idcase
SELECT idcase FROM event_log WHERE activity = 'end trip' GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'end trip' AND resource IN ( SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT id) > 1 ) AND activity NOT IN ('request payment', 'payment handled');
SELECT * FROM event_log WHERE resource!= '' AND activity = 'end trip' AND activity NOT IN ('request payment', 'payment handled');
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'end trip' GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') ) )
SELECT * FROM "event_log" WHERE "cost" IS NULL OR "cost" = 0;
SELECT * FROM event_log WHERE activity = 'end of trip registration' AND cost = 0;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT activity) AS num_people, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE activity LIKE 'permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permit%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE 'permit%' GROUP BY id HAVING COUNT(*) > 1 )
SELECT DISTINCT idcase FROM event_log WHERE activity LIKE 'permit%' GROUP BY idcase HAVING COUNT(*) >= 2;
SELECT idcase FROM event_log WHERE activity LIKE 'permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permit%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT idcase FROM event_log WHERE activity LIKE 'permit%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT idcase, activity FROM event_log WHERE activity LIKE 'permit%' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) ORDER BY idcase, activity;
SELECT idcase FROM event_log WHERE activity LIKE 'permit%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT * FROM event_log WHERE activity LIKE '%permit%';
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource HAVING COUNT(*) > 1;
SELECT idcase, id, timestamp FROM event_log ORDER BY timestamp DESC
SELECT idcase, id, timestamp FROM ( SELECT idcase, id, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY timestamp;
SELECT idcase, id, timestamp FROM ( SELECT idcase, id, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY timestamp;
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log ORDER BY idcase, timestamp DESC;
SELECT idcase, activity, timestamp FROM event_log ORDER BY timestamp DESC GROUP BY idcase
SELECT id FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp DESC;
SELECT idcase, MAX(timestamp) AS last_timestamp, id FROM event_log GROUP BY idcase ORDER BY last_timestamp;
SELECT id, activity, timestamp, resource, cost, idcase FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY idcase;
SELECT idcase, activity FROM ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log WHERE activity LIKE '%processing declarations%' AND cost >= 100 GROUP BY activity HAVING COUNT(*) >= 100;
SELECT CASE WHEN "resource" LIKE '%employee%' THEN 'Employee' WHEN "resource" LIKE '%supervisor%' THEN 'Supervisor' WHEN "resource" LIKE '%administration%' THEN 'Administration' WHEN "resource" LIKE '%pre-approver%' THEN 'Pre-Approver' WHEN "resource" LIKE '%budget owner%' THEN 'Budget Owner' WHEN "resource" LIKE '%director%' THEN 'Director' ELSE 'Unknown' END AS "Group", COUNT(*) AS "Number of Cases" FROM "event_log" GROUP BY CASE WHEN "resource" LIKE '%employee%' THEN 'Employee' WHEN "resource" LIKE '%supervisor%' THEN 'Supervisor' WHEN "resource" LIKE '%administration%' THEN 'Administration' WHEN "resource" LIKE '%pre-approver%' THEN 'Pre-Approver' WHEN "resource" LIKE '%budget owner%' THEN 'Budget Owner' WHEN "resource" LIKE '%director%' THEN 'Director' ELSE 'Unknown' END ORDER BY "Number of Cases" DESC;
SELECT employee_groups.employee AS "Employee", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.employee OR event_log.idcase = employee_groups.supervisor OR event_log.idcase = employee_groups.administration OR event_log.idcase = employee_groups.pre_approver OR event_log.idcase = employee_groups.budget_owner OR event_log.idcase = employee_groups.supervisor OR event_log.idcase = employee_groups.director GROUP BY employee_groups.employee UNION ALL SELECT supervisor AS "Supervisor", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.supervisor GROUP BY supervisor UNION ALL SELECT administration AS "Administration", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.administration GROUP BY administration UNION ALL SELECT pre_approver AS "Pre-Approver", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.pre_approver GROUP BY pre_approver UNION ALL SELECT budget_owner AS "Budget Owner", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.budget_owner GROUP BY budget_owner UNION ALL SELECT supervisor AS "Supervisor", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.supervisor GROUP BY supervisor UNION ALL SELECT director AS "Director", COUNT(*) AS "Number of cases" FROM event_log JOIN employee_groups ON event_log.idcase = employee_groups.director GROUP BY director;
SELECT g.group_name, COUNT(*) as num_cases FROM event_log el JOIN groups g ON el.idcase = g.group_name GROUP BY g.group_name
SELECT COUNT(*) AS total_cases, (SELECT COUNT(*) FROM event_log WHERE activity LIKE '%employee%' OR activity LIKE '%supervisor%' OR activity LIKE '%administration%' OR activity LIKE '%pre-approver%' OR activity LIKE '%budget owner%' OR activity LIKE '%supervisor%' OR activity LIKE '%director%') AS employee_related_cases, (SELECT COUNT(*) FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%director%') AS supervisor_related_cases, (SELECT COUNT(*) FROM event_log WHERE activity LIKE '%administration%' OR activity LIKE '%director%') AS administration_related_cases, (SELECT COUNT(*) FROM event_log WHERE activity LIKE '%pre-approver%' OR activity LIKE '%budget owner%' OR activity LIKE '%supervisor%' OR activity LIKE '%director%') AS pre_approver_related_cases, (SELECT COUNT(*) FROM event_log WHERE activity LIKE '%budget owner%' OR activity LIKE '%director%') AS budget_owner_related_cases FROM event_log GROUP BY 1;
SELECT eg.group_name, COUNT(*) AS num_declarations FROM event_log el JOIN ( SELECT 'Employee' AS group_name, 'login' AS activity UNION ALL SELECT 'Supervisor' AS group_name, 'approve' AS activity UNION ALL SELECT 'Administration' AS group_name, 'admin' AS activity UNION ALL SELECT 'Pre-Approver' AS group_name, 'pre_approve' AS activity UNION ALL SELECT 'Budget Owner' AS group_name, 'budget' AS activity UNION ALL SELECT 'Director' AS group_name, 'direct' AS activity ) eg ON el.activity = eg.activity GROUP BY eg.group_name
SELECT activity, COUNT(*) AS frequency, activity LIKE '%employee%' AS is_employee, activity LIKE '%supervisor%' AS is_supervisor, activity LIKE '%administration%' AS is_administration, activity LIKE '%pre-approver%' AS is_pre_approver, activity LIKE '%budget owner%' AS is_budget_owner, activity LIKE '%director%' AS is_director FROM event_log WHERE resource IS NOT NULL GROUP BY activity ORDER BY CASE WHEN is_employee THEN 1 WHEN is_supervisor THEN 2 WHEN is_administration THEN 3 WHEN is_pre_approver THEN 4 WHEN is_budget_owner THEN 5 WHEN is_director THEN 6 ELSE 7 END, frequency DESC;
SELECT rg.label, COUNT(*) as activity_count FROM (SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(resource, ',', 1), '[', -1) as label, activity FROM event_log) as rg GROUP BY rg.label ORDER BY activity_count DESC;
SELECT CASE WHEN activity LIKE '%admin%' THEN 'admin' WHEN activity LIKE '%user%' THEN 'user' ELSE 'other' END AS role, COUNT(*) AS count FROM event_log GROUP BY role ORDER BY count DESC;
SELECT idcase FROM event_log WHERE timestamp > (SELECT MAX(timestamp) FROM event_log WHERE idcase = event_log.idcase)
SELECT DISTINCT idcase FROM event_log WHERE activity!= 'TRIP_END' AND id IN ( SELECT id FROM event_log WHERE activity = 'TRIP_END' ) ORDER BY idcase;
SELECT * FROM event_log WHERE activity IN ('check-out', 'payment', 'trip_end');
SELECT el.id, el.activity, el.timestamp, el.resource, el.cost, el.idcase FROM event_log el JOIN trip t ON el.idcase = t.id WHERE el.timestamp > t.end_timestamp
SELECT DISTINCT idcase FROM event_log WHERE timestamp > (SELECT end_date FROM trip)
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%declaration%' AND idcase IS NOT NULL AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity = 'end of trip');
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity ='send reminder' AND id IN ( SELECT id FROM event_log ORDER BY timestamp DESC LIMIT 1 )
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='send reminder' AND id IN ( SELECT id FROM event_log WHERE activity!='send reminder' ORDER BY timestamp DESC LIMIT 1 )
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='send reminder' ORDER BY timestamp DESC;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='send reminder' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='send reminder' AND (id, timestamp) IN ( SELECT id, MAX(timestamp) FROM event_log GROUP BY idcase )
SELECT COUNT(*) FROM event_log WHERE activity ='send reminder';
SELECT DISTINCT resource FROM event_log WHERE timestamp < '2018-03-31 00:00:00' OR timestamp > '2018-04-01 00:00:00'
SELECT DISTINCT resource FROM resources WHERE resource NOT IN ( SELECT resource FROM event_log WHERE timestamp >= '2018-03-31 00:00:00' AND timestamp < '2018-04-01 00:00:00' )
SELECT DISTINCT resource FROM event_log WHERE timestamp NOT LIKE '%2018-03-31%' AND resource IS NOT NULL;
SELECT resource FROM event_log WHERE activity = 'idle' AND timestamp >= '2018-03-31 00:00:00' AND timestamp < '2018-04-01 00:00:00';
SELECT DISTINCT "resource" AS "Employee" FROM "event_log" WHERE "activity"!= 'idle' -- exclude idle activities AND "timestamp" BETWEEN '2018-03-31 00:00:00' AND '2018-03-31 23:59:59' -- filter by date AND "resource" LIKE '%travel declaration%' -- filter by process AND "idcase" IS NULL -- exclude activities related to a specific case ORDER BY "Employee";
SELECT DISTINCT e.resource FROM "event_log" e WHERE NOT EXISTS ( SELECT 1 FROM "event_log" a WHERE a.timestamp = '2018-03-31' AND a.resource = e.resource )
SELECT activity, COUNT(*) AS num_events FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase = 'completed' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE idcase LIKE '%Completed%' AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE idcase NOT LIKE '%open%' AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase = 'case' GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity LIKE '%processing declarations completed%' AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity!= 'payment handled' GROUP BY idcase HAVING COUNT(DISTINCT idcase) = (SELECT COUNT(DISTINCT idcase) FROM event_log);
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity!= 'payment handled';
SELECT COUNT(DISTINCT "idcase") FROM "idcase" WHERE "idcase" NOT IN (SELECT "idcase" FROM "event_log" WHERE "activity" = 'payment handled');
SELECT COUNT(DISTINCT "idcase") AS num_cases FROM "event_log" WHERE NOT EXISTS ( SELECT 1 FROM "event_log" WHERE "activity" = 'payment handled' )
SELECT COUNT(*) FROM event_log WHERE activity NOT LIKE '%payment handled%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(DISTINCT el.id) AS num_declarations_without_payment FROM event_log el WHERE el.id NOT IN ( SELECT idcase FROM event_log WHERE activity = 'payment' )
SELECT DISTINCT idcase FROM event_log WHERE activity!= 'payment'
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_distinct_resources FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY num_resources DESC;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS num_employees FROM event_log GROUP BY activity ORDER BY num_employees DESC;
SELECT el1.activity AS previous_activity FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp < el2.timestamp WHERE el2.activity ='send reminder';
SELECT * FROM event_log WHERE id < ( SELECT id FROM event_log WHERE activity ='send reminder' )
SELECT DISTINCT el1.activity FROM event_log el1 JOIN event_log el2 ON el1.id < el2.id AND el2.activity ='reminder' WHERE el1.id = (SELECT id FROM event_log WHERE activity ='reminder' ORDER BY timestamp DESC LIMIT 1) ORDER BY el1.timestamp DESC;
SELECT COUNT(idcase) AS num_cases, COUNT(*) AS num_events, idcase FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT e.idcase, COUNT(*) AS event_count, COUNT(*) OVER (PARTITION BY e.idcase) AS total_cases FROM event_log e GROUP BY e.idcase ORDER BY event_count;
SELECT COUNT(idcase) AS num_events, idcase AS case_id FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT COUNT(*) AS event_count, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY event_count ORDER BY event_count;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 0
SELECT AVG(SUM("cost")) AS average_total_cost FROM ( SELECT "idcase", SUM("cost") AS total_cost FROM "event_log" GROUP BY "idcase" ) AS case_costs;
SELECT AVG(total_cost) AS mean_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(SUM(cost)) AS mean_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(SUM("cost")) AS mean_total_cost FROM ( SELECT "idcase", SUM("cost") AS total_cost FROM "event_log" GROUP BY "idcase" ) AS case_costs;
SELECT AVG(SUM("cost")) AS mean_total_cost FROM "event_log" GROUP BY "idcase";
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity = 'declaration';
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT e.name, AVG(el.cost) AS mean_cost FROM event_log el JOIN employees e ON el.idcase = e.id GROUP BY e.name;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as event_count FROM event_log WHERE activity ='registered' GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS num_requests FROM event_log WHERE activity = 'process travel declaration' GROUP BY resource ORDER BY num_requests DESC LIMIT 10;
SELECT DATE(timestamp) AS date, COUNT(*) AS num_events FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, COUNT(*) AS occurrences FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, COUNT(*) AS num_actions FROM event_log WHERE activity LIKE '%processing the declarations%' GROUP BY DATE(timestamp) ORDER BY date;
SELECT el1.resource AS Resource1, el1.activity AS Activity, el1.timestamp AS Timestamp1, el2.resource AS Resource2, el2.timestamp AS Timestamp2 FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity = el2.activity AND el1.resource!= el2.resource ORDER BY el1.timestamp;
SELECT el1.activity, el1.timestamp AS timestamp1, el1.resource AS resource1, el2.timestamp AS timestamp2, el2.resource AS resource2 FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity = el2.activity ORDER BY el1.id;
SELECT activity, resource, idcase, COUNT(*) AS count FROM event_log GROUP BY activity, resource HAVING COUNT(DISTINCT idcase) > 1;
SELECT el.idcase, COUNT(*) AS num_events FROM event_log el WHERE el.activity = 'declaration final approved by director' GROUP BY el.idcase HAVING el.id = (SELECT MIN(id) FROM event_log WHERE activity = 'declaration final approved by director')
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration final approved by director' AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'declaration final approved by director' )
SELECT idcase, COUNT(*) AS num_interventions FROM event_log WHERE activity LIKE '%intervention%' AND activity NOT LIKE '%final approval%' AND activity NOT LIKE '%approval%' AND idcase IN ( SELECT idcase FROM event_log WHERE activity LIKE '%final approval%' AND activity LIKE '%director%' ) GROUP BY idcase
SELECT id, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (ORDER BY timestamp), timestamp) AS time_passed FROM event_log WHERE activity IN ('permit submitted by employee', 'permit approved by administration') ORDER BY id;
SELECT el1.timestamp AS submit_timestamp, el2.timestamp AS approve_timestamp, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS time_interval FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity = 'permit submitted by employee' AND el2.activity = 'permit approved by administration' ORDER BY submit_timestamp;
SELECT TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'employee requests permit'), (SELECT timestamp FROM event_log WHERE activity = 'permit approved by administration')) AS time_diff FROM event_log WHERE activity IN ('employee requests permit', 'permit approved by administration') ORDER BY id;
SELECT idcase, activity, COUNT(*) AS num_events FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT * FROM event_log WHERE activity LIKE '%rework%' OR activity LIKE '%rework%';
SELECT idcase FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1 )
SELECT Based on the provided database schema, the declarations that required rework are: 1. The COLLATE NOCASE specification for the activity, resource, and idcase columns.
SELECT Based on the provided database schema, it appears that there are no issues with rework in the declarations. The schema is well-defined and does not contain any syntax errors or ambiguities. However, if you're asking about potential issues or areas for improvement in the schema, here are a few observations: 1. The use of TEXT COLLATE NOCASE for the activity, resource, and idcase columns may not be necessary, as the COLLATE clause is typically used to specify the collation for character data types. If the data is already stored in a case-insensitive manner, the COLLATE NOCASE clause may not provide any additional benefits. 2. The cost column is defined as NUMERIC, which is a generic data type that can store decimal values. However, it's not clear what the precision and scale of the cost column should be. If the cost values are expected to have a specific number of decimal places, it may be beneficial to specify the precision and scale explicitly. 3. The id column is defined as an int, which is a good choice for a primary key. However, it's not clear what the range of values for the id column should be. If the id values are expected to be unique and sequential, it may be beneficial to specify a specific range or increment for the id column. Overall, the provided schema appears to be well-defined and does not contain any obvious issues with rework. However, it's always a good idea to review and refine the schema to ensure that it meets the specific requirements of your application.
SELECT "activity", COUNT(*) AS count, COUNT(DISTINCT "activity") AS distinct_count FROM "event_log" GROUP BY "activity";
SELECT activity, timestamp, LAG(activity) OVER (ORDER BY timestamp) AS previous_activity FROM event_log WHERE activity = LAG(activity) OVER (ORDER BY timestamp);
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) ORDER BY id;
SELECT idcase, activity, timestamp, COUNT(*) AS sequence_length FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 1 ) GROUP BY idcase, activity, timestamp ORDER BY idcase, activity, timestamp;
SELECT activity, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time FROM event_log GROUP BY activity HAVING COUNT(DISTINCT timestamp) > 1 ORDER BY start_time;
SELECT A SQL question! It seems like you're asking me to identify any potential issues with the database schema, specifically with regards to equal and consecutive interventions. After reviewing the schema, I don't see any obvious issues with equal and consecutive interventions. The schema appears to be well-defined, with each column having a clear data type and purpose. However, I do notice that the id column is defined as an int, which might lead to potential issues if you're planning to store large numbers of events. You might want to consider using a larger data type, such as BIGINT, to accommodate a larger range of values. Additionally, the cost column is defined as NUMERIC, which is a good choice for storing financial data. However, you might want to consider adding a check constraint to ensure that the values in this column are within a reasonable range (e.g., non-negative and not exceeding a certain maximum value). Overall, the schema looks good, but it's always a good idea to review and test your database schema thoroughly before deploying it to production.
SELECT el1.resource AS resource FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity = el2.activity AND el1.idcase = el2.idcase GROUP BY el1.resource HAVING COUNT(*) >= 2;
SELECT Unfortunately, the provided database schema does not contain any information about employees or supervisors. The table "event_log" appears to be a log of events related to some kind of activity, with columns for the activity, timestamp, resource, cost, and idcase. There is no column or table that would indicate which employees are supervisors. To answer this question, you would need a separate table or column that contains information about employees and their roles, such as a "supervisor" column.
SELECT Based on the provided database schema, it seems that there is no information about employees or supervisors. The table "event_log" appears to contain information about events or activities, such as "activity", "resource", and "cost", but it does not contain any information about employees or their roles. To answer the question, we would need additional information or tables that contain data about employees and their roles. For example, we might need a "employees" table with columns for "employee_id", "name", and "role", and a "supervisors" table that links employees to their supervisors. Without this additional information, we cannot provide a specific answer to the question.
SELECT Based on the provided database schema, there is no information about employees or budget responsibility. The table "event_log" appears to be a log of events related to activities, resources, and costs, but it does not contain any information about employees or budget responsibility. To answer the question, you would need additional tables or information that relate employees to budget responsibility. For example, you might have a "employees" table with columns for employee ID, name, and role, and a "budget_responsibility" table that links employees to specific budgets or resources. Without this additional information, it is not possible to determine which employees are responsible for the budget.
SELECT Based on the provided database schema, it seems that there is no information about employees or budget owners. The table "event_log" appears to contain information about events, activities, and resources, but not about employees or budget owners. To answer the question, we would need additional information or tables that contain employee and budget owner data. If you provide more context or additional tables, I'd be happy to help you with the query.
